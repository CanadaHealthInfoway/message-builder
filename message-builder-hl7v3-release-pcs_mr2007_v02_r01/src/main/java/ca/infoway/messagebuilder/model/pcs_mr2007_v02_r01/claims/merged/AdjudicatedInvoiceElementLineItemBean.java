/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy$
 * Last modified: $LastChangedDate$
 * Revision:      $LastChangedRevision$
 */
/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.pcs_mr2007_v02_r01.claims.merged;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.INT;
import ca.infoway.messagebuilder.datatype.MO;
import ca.infoway.messagebuilder.datatype.PQ;
import ca.infoway.messagebuilder.datatype.RTO;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.INTImpl;
import ca.infoway.messagebuilder.datatype.impl.MOImpl;
import ca.infoway.messagebuilder.datatype.impl.PQImpl;
import ca.infoway.messagebuilder.datatype.impl.RTOImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Money;
import ca.infoway.messagebuilder.datatype.lang.PhysicalQuantity;
import ca.infoway.messagebuilder.datatype.lang.Ratio;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.pcs_mr2007_v02_r01.claims.coct_mt680000ca.AdjudicatedResultOutcomeBean;
import ca.infoway.messagebuilder.model.pcs_mr2007_v02_r01.claims.ficr_mt610201ca.AllowableBean;



/**
 * <p>AdjudicatedInvoiceElementLineItem</p>
 * 
 * <p>COCT_MT680000CA.AdjudicatedInvoiceElementDetail: (no 
 * business name)</p>
 * 
 * <p><p>Domain for AdjudicatedInvoiceElementDetail.code is 
 * GenericBillableItemModifier</p></p>
 * 
 * <p>FICR_MT610201CA.AdjudicatedInvoiceElementDetail: 
 * Adjudicated Invoice Element / Line Item</p>
 * 
 * <p><p>Domain for AdjudicatedInvoiceElementDetail.code is 
 * GenericBillableItemModifier</p></p>
 * 
 * <p><p>The details of the invoice element / line item 
 * adjudicated.</p></p>
 */
@Hl7PartTypeMapping({"COCT_MT680000CA.AdjudicatedInvoiceElementDetail","FICR_MT610201CA.AdjudicatedInvoiceElementDetail"})
public class AdjudicatedInvoiceElementLineItemBean extends MessagePartBean implements ca.infoway.messagebuilder.model.pcs_mr2007_v02_r01.claims.coct_mt680000ca.AdjudicatedInvoiceElementChoice, ca.infoway.messagebuilder.model.pcs_mr2007_v02_r01.claims.ficr_mt610201ca.AdjudicatedInvoiceElementChoice {

    private static final long serialVersionUID = 20120215L;
    private AdjudicatedResultOutcomeBean outcomeOf;
    private CV code = new CVImpl();
    private PQ unitQuantity = new PQImpl();
    private RTO<Money, PhysicalQuantity> unitPriceAmt = new RTOImpl<Money, PhysicalQuantity>();
    private MO netAmt = new MOImpl();
    private INT factorNumber = new INTImpl();
    private AllowableBean reference1Allowable;
    private II id = new IIImpl();


    @Hl7XmlMapping({"outcomeOf"})
    public AdjudicatedResultOutcomeBean getOutcomeOf() {
        return this.outcomeOf;
    }
    public void setOutcomeOf(AdjudicatedResultOutcomeBean outcomeOf) {
        this.outcomeOf = outcomeOf;
    }


    /**
     * <p>AdjudicatedProductServiceCode</p>
     * 
     * <p>Adjudicated Product/Service Code</p>
     * 
     * <p><p>The product or service code adjudicated. I.e. Office 
     * visit, taxes, markup</p></p>
     * 
     * <p><p>For Adjudication Results: code must match to the 
     * corresponding invoice element that was 
     * submitted.</p><p>Modifiers for the codes are taken from the 
     * same domain (i.e ActPoductServiceBillableItemCode).</p></p>
     * 
     * <p><p>For Adjudication Results: code must match to the 
     * corresponding invoice element that was 
     * submitted.</p><p>Modifiers for the codes are taken from the 
     * same domain (i.e ActPoductServiceBillableItemCode).</p></p>
     * 
     * <p><p>For Adjudication Results: code must match to the 
     * corresponding invoice element that was 
     * submitted.</p><p>Modifiers for the codes are taken from the 
     * same domain (i.e ActPoductServiceBillableItemCode).</p></p>
     * 
     * <p><p>For Adjudication Results: code must match to the 
     * corresponding invoice element that was 
     * submitted.</p><p>Modifiers for the codes are taken from the 
     * same domain (i.e ActPoductServiceBillableItemCode).</p></p>
     * 
     * <p>(no business name)</p>
     * 
     * <p><p>Product/Service Code e.g. Office Visit ,Taxes, Markup, 
     * Dispense, including Product/Service Code Modifier e.g. 
     * northern isolation, off hours specialty, on call</p></p>
     */
    @Hl7XmlMapping({"code"})
    public Code getCode() {
        return (Code) this.code.getValue();
    }
    public void setCode(Code code) {
        this.code.setValue(code);
    }


    /**
     * <p>AdjudicatedUnitQuantity</p>
     * 
     * <p>(no business name)</p>
     * 
     * <p><p>e.g. 3 {boxes}</p></p>
     * 
     * <p>Adjudicated Unit Quantity</p>
     * 
     * <p><p>The number of instances of the product or service 
     * adjudicated. I.e. 4 hours, 4 mg, 4 boxes, 15 each of a 
     * container of 1000 each, etc.</p></p>
     */
    @Hl7XmlMapping({"unitQuantity"})
    public PhysicalQuantity getUnitQuantity() {
        return this.unitQuantity.getValue();
    }
    public void setUnitQuantity(PhysicalQuantity unitQuantity) {
        this.unitQuantity.setValue(unitQuantity);
    }


    /**
     * <p>AdjudicatedUnitPrice</p>
     * 
     * <p>(no business name)</p>
     * 
     * <p><p>e.g. $50 CAD/ 1 {box}</p></p>
     * 
     * <p>Adjudicated Unit Price</p>
     * 
     * <p><p>The monetary cost per unit of the product or service 
     * adjudicated. I.e.. $0.20/mg, $250/day, $50</p></p>
     * 
     * <p><p>The monetary cost per unit of the product or service. 
     * I.e.. $0.20/mg, $250/day, $50</p></p>
     */
    @Hl7XmlMapping({"unitPriceAmt"})
    public Ratio<Money, PhysicalQuantity> getUnitPriceAmt() {
        return this.unitPriceAmt.getValue();
    }
    public void setUnitPriceAmt(Ratio<Money, PhysicalQuantity> unitPriceAmt) {
        this.unitPriceAmt.setValue(unitPriceAmt);
    }


    /**
     * <p>AdjudicatedInvoiceLineAmount</p>
     * 
     * <p>(no business name)</p>
     * 
     * <p><p>= unit_qty * unit_price_amt * factor_nbr * points_nbr. 
     * E.g. $150 CAD</p></p>
     * 
     * <p>Adjudicated Invoice Line Amount</p>
     * 
     * <p><p>The amount adjudicated for the invoice line product or 
     * service. This is the value of the Adjudicated Unit Quantity 
     * * Ajdudicated Unit Price.</p></p>
     * 
     * <p><p>The amount billed for the Invoice Line product or 
     * service.</p></p>
     */
    @Hl7XmlMapping({"netAmt"})
    public Money getNetAmt() {
        return this.netAmt.getValue();
    }
    public void setNetAmt(Money netAmt) {
        this.netAmt.setValue(netAmt);
    }


    /**
     * <p>PercentageOfTaxAppliedToUnitPriceAmt</p>
     * 
     * <p>(no business name)</p>
     * 
     * <p><p>multiplier, can be used for tax percentages such as 
     * 0.07</p></p>
     * 
     * <p>Percentage of Tax applied to unitPriceAmt</p>
     * 
     * <p><p>Factor numbers are used for taxes. They represent the 
     * percentage of tax applied to unitPriceAmt.</p></p>
     */
    @Hl7XmlMapping({"factorNumber"})
    public Integer getFactorNumber() {
        return this.factorNumber.getValue();
    }
    public void setFactorNumber(Integer factorNumber) {
        this.factorNumber.setValue(factorNumber);
    }


    @Hl7XmlMapping({"reference1/allowable"})
    public AllowableBean getReference1Allowable() {
        return this.reference1Allowable;
    }
    public void setReference1Allowable(AllowableBean reference1Allowable) {
        this.reference1Allowable = reference1Allowable;
    }


    /**
     * <p>AdjudicatedInvoiceElementIdentifier</p>
     * 
     * <p>Adjudicated Invoice Element Identifier</p>
     * 
     * <p><p>Set of identifiers that uniquely identify the invoice 
     * element adjudicated.</p></p>
     * 
     * <p><p>The Root Adjudicated Invoice Element Group reflects 
     * the EOB Identifier.</p><p>For Invoice (COB): An idenitifier 
     * may need to be generated by the submitting application in 
     * the situation where previous adjudication results are 
     * received manually or do not match the level of detail 
     * required for the downstream adjudicator.</p></p>
     * 
     * <p><p>The Root Adjudicated Invoice Element Group reflects 
     * the EOB Identifier.</p><p>For Invoice (COB): An idenitifier 
     * may need to be generated by the submitting application in 
     * the situation where previous adjudication results are 
     * received manually or do not match the level of detail 
     * required for the downstream adjudicator.</p></p>
     * 
     * <p><p>- For Invoice (COB): An idenitifier may need to be 
     * generated by the submitting application in the situation 
     * where previous adjudication results are received manually or 
     * do not match the level of detail required for the downstream 
     * adjudicator.</p></p>
     */
    @Hl7XmlMapping({"id"})
    public Identifier getId() {
        return this.id.getValue();
    }
    public void setId(Identifier id) {
        this.id.setValue(id);
    }

}
