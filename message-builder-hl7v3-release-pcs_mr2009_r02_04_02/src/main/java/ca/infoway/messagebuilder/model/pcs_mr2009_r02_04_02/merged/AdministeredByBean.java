/**
 * Copyright 2011 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy$
 * Last modified: $LastChangedDate$
 * Revision:      $LastChangedRevision$
 */

/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_02.merged;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.ED;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.EDImpl;
import ca.infoway.messagebuilder.domainvalue.ParticipationMode;
import ca.infoway.messagebuilder.domainvalue.ParticipationSignature;
import ca.infoway.messagebuilder.model.MessagePartBean;



/**
 * <p>POIZ_MT030060CA.Performer: administered by</p>
 * 
 * <p><p>The provider who administered the vaccine.</p></p>
 * 
 * <p><p>Needed to identify who actually administered the 
 * vaccine to the patient. If the performing provider is not 
 * specified, the author is assumed to be the performing 
 * provider. This information may not always be known. As a 
 * result, this participation is required.</p></p>
 * 
 * <p>POIZ_MT030050CA.Performer: administered by</p>
 * 
 * <p><p>The provider who administered the vaccine.</p></p>
 * 
 * <p><p>Needed to identify who actually administered the 
 * vaccine to the patient. If the performing provider is not 
 * specified, the author is assumed to be the performing 
 * provider. This information may not always be known. As a 
 * result, this participation is required.</p></p>
 * 
 * <p>POIZ_MT060150CA.Performer: administered by</p>
 * 
 * <p><p>The provider who administered the vaccine.</p></p>
 * 
 * <p><p>Needed to identify who actually administered the 
 * vaccine to the patient. If the performing provider is not 
 * specified, the author is assumed to be the performing 
 * provider. This information may not always be known. As a 
 * result, this participation is required.</p></p>
 * 
 * <p>REPC_MT210002CA.Performer: *u: referred to</p>
 * 
 * <p><p>Identifies the specific provider for which the 
 * referral is to be sent.</p></p>
 * 
 * <p><p>If the referral was targeted to a specific provider 
 * then the identity of the provider must be known.</p></p>
 * 
 * <p>REPC_MT210003CA.Performer: *u: referred to</p>
 * 
 * <p><p>Identifies the specific provider for which the 
 * referral is to be sent.</p></p>
 * 
 * <p><p>If the referral was targeted to a specific provider 
 * then the identity of the provider must be known.</p></p>
 */
@Hl7PartTypeMapping({"POIZ_MT030050CA.Performer","POIZ_MT030060CA.Performer","POIZ_MT060150CA.Performer","REPC_MT210001CA.Performer","REPC_MT210002CA.Performer","REPC_MT210003CA.Performer"})
public class AdministeredByBean extends MessagePartBean {

    private static final long serialVersionUID = 20110407L;
    private CV signingMethod = new CVImpl();
    private CV signatureCode = new CVImpl();
    private ED<String> digitalSignature = new EDImpl<String>();
    private HealthcareWorkerBean assignedEntity;


    /**
     * <p>SigningMethod</p>
     * 
     * <p>Signing method</p>
     * 
     * <p><p>A code specifying the modality by which the original 
     * information was presented.</p></p>
     * 
     * <p><p>Used to specify whether the information was initially 
     * provided verbally, (hand-)written, or electronically. As not 
     * all implementations will need to communication this 
     * information, this attribute is optional.</p></p>
     */
    @Hl7XmlMapping({"modeCode"})
    public ParticipationMode getSigningMethod() {
        return (ParticipationMode) this.signingMethod.getValue();
    }
    public void setSigningMethod(ParticipationMode signingMethod) {
        this.signingMethod.setValue(signingMethod);
    }


    /**
     * <p>SignatureCode</p>
     * 
     * <p>Signature Code</p>
     * 
     * <p><p>A code specifying whether and how the participant has 
     * attested his participation through a signature and or 
     * whether such a signature is needed.</p></p>
     * 
     * <p><p>Allows for communicating whether a the provider has 
     * digitally signed their signature. Strong, trusted 
     * authentication of the submitting author is sufficient to 
     * remove the need for digital signatures. As a result, this 
     * attribute is optional.</p></p>
     */
    @Hl7XmlMapping({"signatureCode"})
    public ParticipationSignature getSignatureCode() {
        return (ParticipationSignature) this.signatureCode.getValue();
    }
    public void setSignatureCode(ParticipationSignature signatureCode) {
        this.signatureCode.setValue(signatureCode);
    }


    /**
     * <p>DigitalSignature</p>
     * 
     * <p>Digital Signature</p>
     * 
     * <p><p>A textual or multimedia depiction of the signature by 
     * which the participant endorses his or her participation in 
     * the Act as specified in the Participation.typeCode and that 
     * he or she agrees to assume the associated 
     * accountability.</p></p>
     * 
     * <p><p>Allows for recording the signature of the performing 
     * provider. Strong, trusted authentication of the submitting 
     * author is sufficient to remove the need for digital 
     * signatures. As a result, this attribute is optional.</p></p>
     */
    @Hl7XmlMapping({"signatureText"})
    public String getDigitalSignature() {
        return this.digitalSignature.getValue();
    }
    public void setDigitalSignature(String digitalSignature) {
        this.digitalSignature.setValue(digitalSignature);
    }


    @Hl7XmlMapping({"assignedEntity"})
    public HealthcareWorkerBean getAssignedEntity() {
        return this.assignedEntity;
    }
    public void setAssignedEntity(HealthcareWorkerBean assignedEntity) {
        this.assignedEntity = assignedEntity;
    }

}
