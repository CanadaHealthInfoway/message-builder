/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_02.iehr.merged;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.BL;
import ca.infoway.messagebuilder.datatype.CD;
import ca.infoway.messagebuilder.datatype.CS;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.BLImpl;
import ca.infoway.messagebuilder.datatype.impl.CDImpl;
import ca.infoway.messagebuilder.datatype.impl.CSImpl;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.RawListWrapper;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActCareEventType;
import ca.infoway.messagebuilder.domainvalue.ActHealthConditionType;
import ca.infoway.messagebuilder.domainvalue.ActIndicationType;
import ca.infoway.messagebuilder.domainvalue.ActStatus;
import ca.infoway.messagebuilder.domainvalue.HealthcareProviderRoleType;
import ca.infoway.messagebuilder.domainvalue.ServiceDeliveryLocationRoleType;
import ca.infoway.messagebuilder.domainvalue.SubjectReaction;
import ca.infoway.messagebuilder.model.MessagePartBean;



/**
 * <p>REPC_MT000016CA.ParameterList: Adverse Reactions Query 
 * Parameters</p>
 * 
 * <p><p>Defines the set of parameters that may be used to 
 * filter the query response.</p></p>
 * 
 * <p><p>Root class for query definition</p></p>
 * 
 * <p>REPC_MT000008CA.ParameterList: Query Definition</p>
 * 
 * <p><p>Identifies the various parameters that act as filters 
 * on the records to be retrieved.</p></p>
 * 
 * <p><p>Allows the user and/or the point-of-service 
 * application to constrain what EHR information they wish to 
 * retrieve.</p></p>
 * 
 * <p>REPC_MT500006CA.ParameterList: Query Definition</p>
 * 
 * <p><p>Identifies the various parameters that act as filters 
 * on the records to be retrieved.</p></p>
 * 
 * <p><p>Allows the user and/or the point-of-service 
 * application to constrain what EHR information they wish to 
 * retrieve.</p></p>
 */
@Hl7PartTypeMapping({"REPC_MT000008CA.ParameterList","REPC_MT000016CA.ParameterList","REPC_MT500006CA.ParameterList"})
@Hl7RootType
public class QueryDefinitionBean extends MessagePartBean {

    private static final long serialVersionUID = 20110831L;
    private List<II> careCompositionIDs = new ArrayList<II>();
    private List<CV> careCompositionTypes = new ArrayList<CV>();
    private BL includeNotesIndicator = new BLImpl();
    private IVL<TS, Interval<Date>> reactionPeriod = new IVLImpl<TS, Interval<Date>>();
    private CV reactionType = new CVImpl();
    private TS updatedSinceDateTime = new TSImpl();
    private List<II> careCompositionIds = new ArrayList<II>();
    private List<CV> discreteRecordTypes = new ArrayList<CV>();
    private List<CV> documentRecordTypes = new ArrayList<CV>();
    private II eHRRepositoryId = new IIImpl();
    private IVL<TS, Interval<Date>> effectiveDateRange = new IVLImpl<TS, Interval<Date>>();
    private II eventLocationId = new IIImpl();
    private CV eventLocationType = new CVImpl();
    private II filterTemplateId = new IIImpl();
    private List<CD> healthConditions = new ArrayList<CD>();
    private CD indication = new CDImpl();
    private BL mostRecentByTypeIndicator = new BLImpl();
    private List<II> protocolIds = new ArrayList<II>();
    private List<CS> recordStatuses = new ArrayList<CS>();
    private List<CD> recordTypes = new ArrayList<CD>();
    private II requestingProviderId = new IIImpl();
    private II responsibleProviderId = new IIImpl();
    private CV responsibleProviderType = new CVImpl();
    private BL includeHistoryIndicator = new BLImpl();
    private List<II> recordIds = new ArrayList<II>();


    /**
     * <p>CareCompositionIDs</p>
     * 
     * <p>Care Composition IDs</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified encounter, episode or care 
     * event. If unspecified, no filter is applied.</p><p>Note: 
     * When matching on care composition id, systems should also 
     * retrieve records with a fulfillment id to requisitions 
     * associated with the care composition. E.g. When retrieving 
     * records associated with an encounter which includes a 
     * referral, the retrieved records should also include the care 
     * summary created in fulfillment of the referral.</p></p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified encounter, episode or care 
     * event. If unspecified, no filter is applied.</p><p>Note: 
     * When matching on care composition id, systems should also 
     * retrieve records with a fulfillment id to requisitions 
     * associated with the care composition. E.g. When retrieving 
     * records associated with an encounter which includes a 
     * referral, the retrieved records should also include the care 
     * summary created in fulfillment of the referral.</p></p>
     * 
     * <p><p>Allows retrieving all records associated with an 
     * encounter, episode or care event.</p></p>
     */
    @Hl7XmlMapping({"careCompositionID/value"})
    public List<Identifier> getCareCompositionIDs() {
        return new RawListWrapper<II, Identifier>(careCompositionIDs, IIImpl.class);
    }


    /**
     * <p>CareCompositionTypes</p>
     * 
     * <p>S: Care Composition Types</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p><p>Allows retrieving all records associated with a 
     * particular type of encounter, episode or care event. E.g. 
     * Orthopedic Clinic Encounter, ER encounter, Walk-in 
     * encounter, etc.</p></p>
     * 
     * <p>Care Composition Types</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified 'kind' of encounter, episode 
     * or care event. If unspecified, no filter is applied.</p></p>
     * 
     * <p><p>Allows retrieving all records associated with a 
     * particular type of encounter, episode or care event. 
     * E.g.Orthopedic Clinic Encounter, ER encounter, Walk-in 
     * encounter, etc.</p></p>
     */
    @Hl7XmlMapping({"careCompositionType/value"})
    public List<ActCareEventType> getCareCompositionTypes() {
        return new RawListWrapper<CV, ActCareEventType>(careCompositionTypes, CVImpl.class);
    }


    /**
     * <p>IncludeNotesIndicator</p>
     * 
     * <p>F: Include Notes Indicator</p>
     * 
     * <p><p>If true, indicates that notes should be included when 
     * retrieving the record(s). If false, notes will not be 
     * returned.</p></p>
     * 
     * <p><p>Allows filtering whether supplemental comments should 
     * be retrieved or not. Some uses of the record do not require 
     * having the supplemental information available. The attribute 
     * is mandatory because it must be known whether notes are to 
     * be returned or not.</p></p>
     * 
     * <p>Include Notes Indicator</p>
     * 
     * <p><p>Indicates whether or not notes attached to the adverse 
     * reactions records are to be returned along with the detailed 
     * information.</p></p>
     * 
     * <p><p>Allows for the flexibility of omitting/including notes 
     * in the retrieval of information for adverse reactions 
     * data.</p><p>Because the attribute is boolean, it must 
     * explicitly indicate a 'TRUE' or 'FALSE', and thus it is 
     * mandatory.</p></p>
     * 
     * <p><p>Allows for the flexibility of omitting/including notes 
     * in the retrieval of information for adverse reactions 
     * data.</p><p>Because the attribute is boolean, it must 
     * explicitly indicate a 'TRUE' or 'FALSE', and thus it is 
     * mandatory.</p></p>
     */
    @Hl7XmlMapping({"includeNotesIndicator/value"})
    public Boolean getIncludeNotesIndicator() {
        return this.includeNotesIndicator.getValue();
    }
    public void setIncludeNotesIndicator(Boolean includeNotesIndicator) {
        this.includeNotesIndicator.setValue(includeNotesIndicator);
    }


    /**
     * <p>ReactionPeriod</p>
     * 
     * <p>F:Reaction Period</p>
     * 
     * <p><p>The period in which the recorded adverse reaction 
     * occurred or was updated. I.e. Filters the result-set to 
     * those reactions whose onset occurred within the time-range 
     * specified by this parameter.</p></p>
     * 
     * <p><p>Allows the requester to specify the adverse reaction 
     * period of interest for retrieval of adverse reaction 
     * records. Useful to avoid run-away queries.</p></p>
     */
    @Hl7XmlMapping({"reactionPeriod/value"})
    public Interval<Date> getReactionPeriod() {
        return this.reactionPeriod.getValue();
    }
    public void setReactionPeriod(Interval<Date> reactionPeriod) {
        this.reactionPeriod.setValue(reactionPeriod);
    }


    /**
     * <p>ReactionType</p>
     * 
     * <p>G:Reaction Type</p>
     * 
     * <p><p>Indicates that the result set be filtered to include 
     * only those allergy/intolerance records for which specific 
     * type of reaction was recorded.</p><p>Reaction types include: 
     * STEVEN JOHNSON, ANAPHYLAXIS, NAUSEA, etc</p></p>
     * 
     * <p><p>Indicates that the result set be filtered to include 
     * only those allergy/intolerance records for which specific 
     * type of reaction was recorded.</p><p>Reaction types include: 
     * STEVEN JOHNSON, ANAPHYLAXIS, NAUSEA, etc</p></p>
     * 
     * <p><p>Allows the requester to retrieve only those 
     * allergy/intolerance records for which there was a specific 
     * type of reaction.</p></p>
     */
    @Hl7XmlMapping({"reactionType/value"})
    public SubjectReaction getReactionType() {
        return (SubjectReaction) this.reactionType.getValue();
    }
    public void setReactionType(SubjectReaction reactionType) {
        this.reactionType.setValue(reactionType);
    }


    /**
     * <p>UpdatedSinceDateTime</p>
     * 
     * <p>K: Updated Since DateTime</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * which have been created or revised since the specified date 
     * and time. If unspecified, no filter is applied.</p></p>
     * 
     * <p><p>Useful to retrieve information &quot;since you last 
     * checked&quot;.</p></p>
     */
    @Hl7XmlMapping({"amendedSinceDateTime/value"})
    public Date getUpdatedSinceDateTime() {
        return this.updatedSinceDateTime.getValue();
    }
    public void setUpdatedSinceDateTime(Date updatedSinceDateTime) {
        this.updatedSinceDateTime.setValue(updatedSinceDateTime);
    }


    /**
     * <p>CareCompositionIds</p>
     * 
     * <p>R: Care Composition Ids</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified encounter, episode or care 
     * event. If unspecified, no filter is applied.</p><p>Note: 
     * When matching on care composition id, systems should also 
     * retrieve records with a fulfillment id to requisitions 
     * associated with the care composition. E.g. When retrieving 
     * records associated with an encounter which includes a 
     * referral, the retrieved records should also include the care 
     * summary created in fulfillment of the referral.</p></p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified encounter, episode or care 
     * event. If unspecified, no filter is applied.</p><p>Note: 
     * When matching on care composition id, systems should also 
     * retrieve records with a fulfillment id to requisitions 
     * associated with the care composition. E.g. When retrieving 
     * records associated with an encounter which includes a 
     * referral, the retrieved records should also include the care 
     * summary created in fulfillment of the referral.</p></p>
     * 
     * <p><p>Allows retrieving all records associated with an 
     * encounter, episode or care event.</p></p>
     */
    @Hl7XmlMapping({"careCompositionId/value"})
    public List<Identifier> getCareCompositionIds() {
        return new RawListWrapper<II, Identifier>(careCompositionIds, IIImpl.class);
    }


    /**
     * <p>DiscreteRecordTypes</p>
     * 
     * <p>X: Discrete Record Types</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p><p>Allows filtering of the clinical summary to only 
     * include types of information required by the application 
     * and/or which it is capable of supporting.</p></p>
     */
    @Hl7XmlMapping({"discreteRecordTypes/value"})
    public List<Code> getDiscreteRecordTypes() {
        return new RawListWrapper<CV, Code>(discreteRecordTypes, CVImpl.class);
    }


    /**
     * <p>DocumentRecordTypes</p>
     * 
     * <p>Y: Document Record Types</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p><p>Allows returning discrete data rendered into document 
     * form for applications not capable of displaying data 
     * retrieved in discrete form.</p></p>
     */
    @Hl7XmlMapping({"documentRecordTypes/value"})
    public List<Code> getDocumentRecordTypes() {
        return new RawListWrapper<CV, Code>(documentRecordTypes, CVImpl.class);
    }


    /**
     * <p>EHRRepositoryId</p>
     * 
     * <p>Q: EHR Repository Id</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * records from a specific EHR repository. If unspecified, all 
     * &quot;connected&quot; EHR repositories will be searched.</p></p>
     * 
     * <p><p>Primarily intended to allow filtering an initial 
     * search to a local EHR repository for performance 
     * reasons.</p></p>
     */
    @Hl7XmlMapping({"eHRRepositoryId/value"})
    public Identifier getEHRRepositoryId() {
        return this.eHRRepositoryId.getValue();
    }
    public void setEHRRepositoryId(Identifier eHRRepositoryId) {
        this.eHRRepositoryId.setValue(eHRRepositoryId);
    }


    /**
     * <p>EffectiveDateRange</p>
     * 
     * <p>J: Effective Date Range</p>
     * 
     * <p><p>Filters the set of records to be retrieved to those 
     * which occurred or were effective for the patient within the 
     * date boundaries specified. Either the lower bound or upper 
     * bound or both would be specified. If no value is specified, 
     * no filter will be applied. If there is any overlap between 
     * the specified date-range and the effective date of the 
     * record, the record will be returned.</p></p>
     * 
     * <p><p>Allows constraining the retrieved records to those 
     * applicable on a particular date. Useful in retrieving those 
     * records &quot;currently in effect&quot; as well as 
     * retrieving views of what information was in effect at some 
     * point in the past.</p></p>
     */
    @Hl7XmlMapping({"effectiveTimeRange/value"})
    public Interval<Date> getEffectiveDateRange() {
        return this.effectiveDateRange.getValue();
    }
    public void setEffectiveDateRange(Interval<Date> effectiveDateRange) {
        this.effectiveDateRange.setValue(effectiveDateRange);
    }


    /**
     * <p>EventLocationId</p>
     * 
     * <p>O: Event Location Id</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * records which are officially associated with and/or were 
     * performed by a particular facility. I.e. It will return 
     * records where either the &quot;Service Location&quot; or the 
     * &quot;Record Location&quot; has the specified location id. 
     * Records associated with &quot;sub-locations&quot; (e.g. 
     * departments, wards) will be returned when searching by the 
     * larger location (e.g. hospital).</p></p>
     * 
     * <p><p>Allows retrieving those records associated with a 
     * particular facility.</p></p>
     */
    @Hl7XmlMapping({"eventLocationId/value"})
    public Identifier getEventLocationId() {
        return this.eventLocationId.getValue();
    }
    public void setEventLocationId(Identifier eventLocationId) {
        this.eventLocationId.setValue(eventLocationId);
    }


    /**
     * <p>EventLocationType</p>
     * 
     * <p>P: Event Location Type</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p><p>Allows retrieving those records associated with a 
     * particular kind of facility. E.g. Hospital, clinic, 
     * pharmacy, patient residence, etc.</p></p>
     */
    @Hl7XmlMapping({"eventLocationType/value"})
    public ServiceDeliveryLocationRoleType getEventLocationType() {
        return (ServiceDeliveryLocationRoleType) this.eventLocationType.getValue();
    }
    public void setEventLocationType(ServiceDeliveryLocationRoleType eventLocationType) {
        this.eventLocationType.setValue(eventLocationType);
    }


    /**
     * <p>FilterTemplateId</p>
     * 
     * <p>W: Filter Template Id</p>
     * 
     * <p><p>Indicates that the returned results are to be filtered 
     * according to the specified template. If not specified, no 
     * filter is applied. The specific types of templates available 
     * are undefined and may vary by jurisdiction.</p></p>
     * 
     * <p><p>Allows the application of complex filtering rules such 
     * as &quot;All information relevant to diabetes 
     * management&quot; or &quot;cardiologist view of patient 
     * record&quot;. The query allows distinct filters to be 
     * applied to different types of records. E.g. all allergies, 
     * only most recent lab tests of a particular type, drugs of 
     * one of 5 types, etc. In some cases, the template may 
     * influence how document views of different information types 
     * are rendered.</p></p>
     */
    @Hl7XmlMapping({"filterTemplateId/value"})
    public Identifier getFilterTemplateId() {
        return this.filterTemplateId.getValue();
    }
    public void setFilterTemplateId(Identifier filterTemplateId) {
        this.filterTemplateId.setValue(filterTemplateId);
    }


    /**
     * <p>HealthConditions</p>
     * 
     * <p>T: Health Conditions</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     */
    @Hl7XmlMapping({"healthCondition/value"})
    public List<ActHealthConditionType> getHealthConditions() {
        return new RawListWrapper<CD, ActHealthConditionType>(healthConditions, CDImpl.class);
    }


    /**
     * <p>Indication</p>
     * 
     * <p>U: Indication</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * where the &quot;indication&quot; (reason) for the record was 
     * the specified code.</p><p>This is distinct from the Health 
     * Condition query parameter in that it will only return 
     * records with an explicit indication match (it will not match 
     * on discharge diagnosis, part of related episode, etc.) It 
     * also allows searching on indications such as prophylaxis, 
     * surgery prep, etc.</p></p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * where the &quot;indication&quot; (reason) for the record was 
     * the specified code.</p><p>This is distinct from the Health 
     * Condition query parameter in that it will only return 
     * records with an explicit indication match (it will not match 
     * on discharge diagnosis, part of related episode, etc.) It 
     * also allows searching on indications such as prophylaxis, 
     * surgery prep, etc.</p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     */
    @Hl7XmlMapping({"indication/value"})
    public ActIndicationType getIndication() {
        return (ActIndicationType) this.indication.getValue();
    }
    public void setIndication(ActIndicationType indication) {
        this.indication.setValue(indication);
    }


    /**
     * <p>MostRecentByTypeIndicator</p>
     * 
     * <p>V: Most Recent By Type Indicator</p>
     * 
     * <p><p>If true, indicates that only the most recent records 
     * of a given type or category should be retrieved. I.e. If 
     * there are 10 records of the same kind, only the most recent 
     * one would be returned. If false, all occurrences will be 
     * returned.</p></p>
     * 
     * <p><p>Provides a mechanism of getting a quick overview of 
     * the types of events that have occurred without needing to 
     * look at all occurrences. The attribute is mandatory because 
     * it must be known whether to return the most recent or all 
     * records.</p></p>
     */
    @Hl7XmlMapping({"mostRecentByTypeIndicator/value"})
    public Boolean getMostRecentByTypeIndicator() {
        return this.mostRecentByTypeIndicator.getValue();
    }
    public void setMostRecentByTypeIndicator(Boolean mostRecentByTypeIndicator) {
        this.mostRecentByTypeIndicator.setValue(mostRecentByTypeIndicator);
    }


    /**
     * <p>ProtocolIds</p>
     * 
     * <p>ZI: Protocol Ids</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * associated with the specified protocols. If unspecified, no 
     * filter is applied.</p></p>
     * 
     * <p><p>Allows retrieving records associated with a particular 
     * protocol. Useful in clinical studies and other 
     * research.</p><p>The element is optional because support for 
     * protocols is not deemed a necessity for many healthcare 
     * providers.</p></p>
     * 
     * <p><p>Allows retrieving records associated with a particular 
     * protocol. Useful in clinical studies and other 
     * research.</p><p>The element is optional because support for 
     * protocols is not deemed a necessity for many healthcare 
     * providers.</p></p>
     */
    @Hl7XmlMapping({"protocolId/value"})
    public List<Identifier> getProtocolIds() {
        return new RawListWrapper<II, Identifier>(protocolIds, IIImpl.class);
    }


    /**
     * <p>RecordStatuses</p>
     * 
     * <p>I: Record Statuses</p>
     * 
     * <p><p>Filters the set of records to be retrieved to only 
     * include those with the identified status(s). If no values 
     * are specified, no filter will be applied.</p></p>
     * 
     * <p><p>Allows constraining the status of records to be 
     * retrieved. Multiple repetitions are present to allow 
     * selection of multiple statuses with a single query.</p></p>
     */
    @Hl7XmlMapping({"recordStatus/value"})
    public List<ActStatus> getRecordStatuses() {
        return new RawListWrapper<CS, ActStatus>(recordStatuses, CSImpl.class);
    }


    /**
     * <p>RecordTypes</p>
     * 
     * <p>H:Record Types</p>
     * 
     * <p><p>The following are the valid concept domains / 
     * value-sets for the abstract CanadianEHRRecordDetailType 
     * domain: - ActCareProvisionRequestType (Referral Types) - 
     * ActCareEventType (Discharge-Care Summary Types; Care 
     * Composition Types) - ClinicalReportObservation Type 
     * (Clinical Report Types) - 
     * SimpleMeasurableClinicalObservationType (Measured 
     * Observation Types) - CommomCodedClinicalObservationType 
     * (Coded Observation Types) - ActProfessionalCode 
     * (Professional Service Types) - Act DiagnosisCode (Health 
     * Condition Types)</p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     */
    @Hl7XmlMapping({"recordType/value"})
    public List<Code> getRecordTypes() {
        return new RawListWrapper<CD, Code>(recordTypes, CDImpl.class);
    }


    /**
     * <p>RequestingProviderId</p>
     * 
     * <p>N: Requesting Provider Id</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * whose creation/performance were requested by the identified 
     * provider. If unspecified, no filter is applied.</p></p>
     * 
     * <p><p>Allows a provider to see the results of any requests 
     * they may have made.</p></p>
     */
    @Hl7XmlMapping({"requestingProviderId/value"})
    public Identifier getRequestingProviderId() {
        return this.requestingProviderId.getValue();
    }
    public void setRequestingProviderId(Identifier requestingProviderId) {
        this.requestingProviderId.setValue(requestingProviderId);
    }


    /**
     * <p>ResponsibleProviderId</p>
     * 
     * <p>L: Responsible Provider Id</p>
     * 
     * <p><p>Filters the records retrieved to only include those 
     * where the identified provider was the author, supervisor or 
     * performer. If unspecified, no filter is applied.</p></p>
     * 
     * <p><p>Allows retrieving those records in which a particular 
     * provider has a vested interest.</p></p>
     */
    @Hl7XmlMapping({"responsibleProviderId/value"})
    public Identifier getResponsibleProviderId() {
        return this.responsibleProviderId.getValue();
    }
    public void setResponsibleProviderId(Identifier responsibleProviderId) {
        this.responsibleProviderId.setValue(responsibleProviderId);
    }


    /**
     * <p>ResponsibleProviderType</p>
     * 
     * <p>M: Responsible Provider Type</p>
     * 
     * <p></p></p>
     * 
     * <p></p></p>
     * 
     * <p><p>Allows retrieving those records in which a particular 
     * kind of provider has a vested interest.</p></p>
     */
    @Hl7XmlMapping({"responsibleProviderType/value"})
    public HealthcareProviderRoleType getResponsibleProviderType() {
        return (HealthcareProviderRoleType) this.responsibleProviderType.getValue();
    }
    public void setResponsibleProviderType(HealthcareProviderRoleType responsibleProviderType) {
        this.responsibleProviderType.setValue(responsibleProviderType);
    }


    /**
     * <p>IncludeHistoryIndicator</p>
     * 
     * <p>G: Include History Indicator</p>
     * 
     * <p><p>If true, indicates that historical versions of the 
     * record(s) should be included. If false, only the current 
     * version will be returned.</p></p>
     * 
     * <p><p>Allows a user to filter whether historical information 
     * is needed. Retrieving historical information will be needed 
     * in some circumstances, but it makes sense to constrain. The 
     * attribute is mandatory because it must be known whether 
     * history is to be returned or not.</p></p>
     */
    @Hl7XmlMapping({"includeHistoryIndicator/value"})
    public Boolean getIncludeHistoryIndicator() {
        return this.includeHistoryIndicator.getValue();
    }
    public void setIncludeHistoryIndicator(Boolean includeHistoryIndicator) {
        this.includeHistoryIndicator.setValue(includeHistoryIndicator);
    }


    /**
     * <p>RecordIds</p>
     * 
     * <p>E: Record Ids</p>
     * 
     * <p><p>A globally unique identifier assigned by the EHR to 
     * the record (or records) to be retrieved.</p></p>
     * 
     * <p><p>Specifically identifies the record to be 
     * returned.</p><p>Because the primary purpose of the query is 
     * to retrieve identified records, the element is 
     * mandatory.</p><p>Multiple repetitions are allowed to support 
     * multiple detail records as part of one query for efficiency 
     * reasons.</p></p>
     * 
     * <p><p>Specifically identifies the record to be 
     * returned.</p><p>Because the primary purpose of the query is 
     * to retrieve identified records, the element is 
     * mandatory.</p><p>Multiple repetitions are allowed to support 
     * multiple detail records as part of one query for efficiency 
     * reasons.</p></p>
     * 
     * <p><p>Specifically identifies the record to be 
     * returned.</p><p>Because the primary purpose of the query is 
     * to retrieve identified records, the element is 
     * mandatory.</p><p>Multiple repetitions are allowed to support 
     * multiple detail records as part of one query for efficiency 
     * reasons.</p></p>
     */
    @Hl7XmlMapping({"recordId/value"})
    public List<Identifier> getRecordIds() {
        return new RawListWrapper<II, Identifier>(recordIds, IIImpl.class);
    }

}
