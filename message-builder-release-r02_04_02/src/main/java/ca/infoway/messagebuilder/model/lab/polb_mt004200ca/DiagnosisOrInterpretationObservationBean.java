/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.lab.polb_mt004200ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.ANY;
import ca.infoway.messagebuilder.datatype.CD;
import ca.infoway.messagebuilder.datatype.CS;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.SET;
import ca.infoway.messagebuilder.datatype.ST;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.ANYImpl;
import ca.infoway.messagebuilder.datatype.impl.CDImpl;
import ca.infoway.messagebuilder.datatype.impl.CSImpl;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.SETImpl;
import ca.infoway.messagebuilder.datatype.impl.STImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.domainvalue.ActStatus;
import ca.infoway.messagebuilder.domainvalue.x_BasicConfidentialityKind;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.common.coct_mt090502ca.HealthcareOrganizationBean;
import ca.infoway.messagebuilder.model.merged.FulfillmentChoiceBean;
import ca.infoway.messagebuilder.model.merged.HasNotesBean;
import ca.infoway.messagebuilder.model.merged.OutbreakBean;
import ca.infoway.messagebuilder.model.merged.ReportSectionSpecimenBean;
import ca.infoway.messagebuilder.model.merged.ReportableHealthIndicatorBean;
import ca.infoway.messagebuilder.model.merged.ResultSortKeyBean;
import ca.infoway.messagebuilder.model.merged.ResultStatusProcessStepBean;
import ca.infoway.messagebuilder.model.merged.RoleChoiceBean;
import ca.infoway.messagebuilder.model.merged.SubjectToTriggerEventBean;
import ca.infoway.messagebuilder.model.merged.SupportingClinicalInformationBean;
import ca.infoway.messagebuilder.model.merged.WasPerformedByBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;



/**
 * <p>Diagnosis or Interpretation Observation</p>
 * 
 * <p>The observation for communicating pathologists 
 * interpretations regarding a specimen. All observations which 
 * support the diagnosis report section(s) directly associated 
 * with the relevant diagnosis section. This structure for 
 * communicating pathology information is different than the 
 * way the sections are formattted in the printed report (each 
 * section contains all specimens with ordinal numbers).</p>
 */
@Hl7PartTypeMapping({"POLB_MT004200CA.SectionLevelObservationEvent"})
public class DiagnosisOrInterpretationObservationBean extends MessagePartBean implements ObservationChoiceBean {

    private static final long serialVersionUID = 20100603L;
    private List<ReportSectionSpecimenBean> specimen = new ArrayList<ReportSectionSpecimenBean>();
    private List<RoleChoiceBean> receiverRoleChoice = new ArrayList<RoleChoiceBean>();
    private SET<II, Identifier> sectionIdentifier = new SETImpl<II, Identifier>(IIImpl.class);
    private List<WasPerformedByBean> performer = new ArrayList<WasPerformedByBean>();
    private CD sectionType = new CDImpl();
    private HealthcareOrganizationBean primaryInformationRecipientAssignedEntity;
    private ST sectionText = new STImpl();
    private List<FulfillmentChoiceBean> inFulfillmentOfFulfillmentChoice = new ArrayList<FulfillmentChoiceBean>();
    private CS observationStatus = new CSImpl();
    private OutbreakBean pertinentInformation1OutbreakEvent;
    private TS sectionReportedDateTime = new TSImpl();
    private List<SupportingClinicalInformationBean> pertinentInformation2SupportingClinicalObservationEvent = new ArrayList<SupportingClinicalInformationBean>();
    private SET<CV, Code> resultMaskingIndicator = new SETImpl<CV, Code>(CVImpl.class);
    private List<ReportableHealthIndicatorBean> component1ReportableTestIndicator = new ArrayList<ReportableHealthIndicatorBean>();
    private ANY<Object> sectionValue = new ANYImpl<Object>();
    private ResultSortKeyBean component2ResultSortKey;
    private List<ReportSectionObservationBean> component3ReportLevelObservationEvent = new ArrayList<ReportSectionObservationBean>();
    private List<ObservationChoiceBean> component4ObservationChoice = new ArrayList<ObservationChoiceBean>();
    private SubjectToTriggerEventBean subjectOf1;
    private List<HasNotesBean> subjectOf2 = new ArrayList<HasNotesBean>();
    private ResultStatusProcessStepBean subjectOf3ResultStatusProcessStep;

    @Hl7XmlMapping({"specimen"})
    public List<ReportSectionSpecimenBean> getSpecimen() {
        return this.specimen;
    }

    @Hl7XmlMapping({"receiver/roleChoice"})
    public List<RoleChoiceBean> getReceiverRoleChoice() {
        return this.receiverRoleChoice;
    }

    @Hl7XmlMapping({"id"})
    public Set<Identifier> getSectionIdentifier() {
        return this.sectionIdentifier.rawSet();
    }

    @Hl7XmlMapping({"performer"})
    public List<WasPerformedByBean> getPerformer() {
        return this.performer;
    }

    @Hl7XmlMapping({"code"})
    public Code getSectionType() {
        return (Code) this.sectionType.getValue();
    }
    public void setSectionType(Code sectionType) {
        this.sectionType.setValue(sectionType);
    }

    @Hl7XmlMapping({"primaryInformationRecipient/assignedEntity"})
    public HealthcareOrganizationBean getPrimaryInformationRecipientAssignedEntity() {
        return this.primaryInformationRecipientAssignedEntity;
    }
    public void setPrimaryInformationRecipientAssignedEntity(HealthcareOrganizationBean primaryInformationRecipientAssignedEntity) {
        this.primaryInformationRecipientAssignedEntity = primaryInformationRecipientAssignedEntity;
    }

    @Hl7XmlMapping({"text"})
    public String getSectionText() {
        return this.sectionText.getValue();
    }
    public void setSectionText(String sectionText) {
        this.sectionText.setValue(sectionText);
    }

    @Hl7XmlMapping({"inFulfillmentOf/fulfillmentChoice"})
    public List<FulfillmentChoiceBean> getInFulfillmentOfFulfillmentChoice() {
        return this.inFulfillmentOfFulfillmentChoice;
    }

    @Hl7XmlMapping({"statusCode"})
    public ActStatus getObservationStatus() {
        return (ActStatus) this.observationStatus.getValue();
    }
    public void setObservationStatus(ActStatus observationStatus) {
        this.observationStatus.setValue(observationStatus);
    }

    @Hl7XmlMapping({"pertinentInformation1/outbreakEvent"})
    public OutbreakBean getPertinentInformation1OutbreakEvent() {
        return this.pertinentInformation1OutbreakEvent;
    }
    public void setPertinentInformation1OutbreakEvent(OutbreakBean pertinentInformation1OutbreakEvent) {
        this.pertinentInformation1OutbreakEvent = pertinentInformation1OutbreakEvent;
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Date getSectionReportedDateTime() {
        return this.sectionReportedDateTime.getValue();
    }
    public void setSectionReportedDateTime(Date sectionReportedDateTime) {
        this.sectionReportedDateTime.setValue(sectionReportedDateTime);
    }

    @Hl7XmlMapping({"pertinentInformation2/supportingClinicalObservationEvent"})
    public List<SupportingClinicalInformationBean> getPertinentInformation2SupportingClinicalObservationEvent() {
        return this.pertinentInformation2SupportingClinicalObservationEvent;
    }

    @Hl7XmlMapping({"confidentialityCode"})
    public Set<x_BasicConfidentialityKind> getResultMaskingIndicator() {
        return this.resultMaskingIndicator.rawSet(x_BasicConfidentialityKind.class);
    }

    @Hl7XmlMapping({"component1/reportableTestIndicator"})
    public List<ReportableHealthIndicatorBean> getComponent1ReportableTestIndicator() {
        return this.component1ReportableTestIndicator;
    }

    @Hl7XmlMapping({"value"})
    public Object getSectionValue() {
        return this.sectionValue.getValue();
    }
    public void setSectionValue(Object sectionValue) {
        this.sectionValue.setValue(sectionValue);
    }

    @Hl7XmlMapping({"component2/resultSortKey"})
    public ResultSortKeyBean getComponent2ResultSortKey() {
        return this.component2ResultSortKey;
    }
    public void setComponent2ResultSortKey(ResultSortKeyBean component2ResultSortKey) {
        this.component2ResultSortKey = component2ResultSortKey;
    }

    @Hl7XmlMapping({"component3/reportLevelObservationEvent"})
    public List<ReportSectionObservationBean> getComponent3ReportLevelObservationEvent() {
        return this.component3ReportLevelObservationEvent;
    }

    @Hl7XmlMapping({"component4/observationChoice"})
    public List<ObservationChoiceBean> getComponent4ObservationChoice() {
        return this.component4ObservationChoice;
    }

    @Hl7XmlMapping({"subjectOf1"})
    public SubjectToTriggerEventBean getSubjectOf1() {
        return this.subjectOf1;
    }
    public void setSubjectOf1(SubjectToTriggerEventBean subjectOf1) {
        this.subjectOf1 = subjectOf1;
    }

    @Hl7XmlMapping({"subjectOf2"})
    public List<HasNotesBean> getSubjectOf2() {
        return this.subjectOf2;
    }

    @Hl7XmlMapping({"subjectOf3/resultStatusProcessStep"})
    public ResultStatusProcessStepBean getSubjectOf3ResultStatusProcessStep() {
        return this.subjectOf3ResultStatusProcessStep;
    }
    public void setSubjectOf3ResultStatusProcessStep(ResultStatusProcessStepBean subjectOf3ResultStatusProcessStep) {
        this.subjectOf3ResultStatusProcessStep = subjectOf3ResultStatusProcessStep;
    }

}
