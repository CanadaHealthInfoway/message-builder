/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.ra.rcmr_mt010002ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.ST;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.RawListWrapper;
import ca.infoway.messagebuilder.datatype.impl.STImpl;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.merged.Consenter;
import ca.infoway.messagebuilder.model.merged.RelatedPersonBean;
import java.util.ArrayList;
import java.util.List;



/**
 * <p>Keyword</p>
 * 
 * <p><p>Information pertaining to a patient's secret password 
 * used to control access to his/her health information.</p></p>
 * 
 * <p><p>Allows a patient to control access to their health 
 * information. Provides authorization for providers to view 
 * patient information.</p></p>
 */
@Hl7PartTypeMapping({"RCMR_MT010002CA.KeywordEvent"})
@Hl7RootType
public class KeywordBean extends MessagePartBean {

    private static final long serialVersionUID = 20110127L;
    private ST keyword = new STImpl();
    private Consenter authorConsenter;
    private List<CV> consentInformationTypes = new ArrayList<CV>();


    /**
     * <p>Keyword</p>
     * 
     * <p><p>Indicate the keyword associated with a particular 
     * consent.</p></p>
     * 
     * <p><p>Allows patients to change their keyword. If explicitly 
     * set to null, removes the keyword for the identified record 
     * types. Because of this, the attribute is set to 
     * 'populated'.</p></p>
     */
    @Hl7XmlMapping({"author/signatureText"})
    public String getKeyword() {
        return this.keyword.getValue();
    }
    public void setKeyword(String keyword) {
        this.keyword.setValue(keyword);
    }


    @Hl7XmlMapping({"author/consenter"})
    public Consenter getAuthorConsenter() {
        return this.authorConsenter;
    }
    public void setAuthorConsenter(Consenter authorConsenter) {
        this.authorConsenter = authorConsenter;
    }

    public PatientBean getAuthorConsenterAsPatient() {
        return this.authorConsenter instanceof PatientBean ? (PatientBean) this.authorConsenter : null;
    }
    public boolean hasAuthorConsenterAsPatient() {
        return (this.authorConsenter instanceof PatientBean);
    }

    public RelatedPersonBean getAuthorConsenterAsPersonalRelationship() {
        return this.authorConsenter instanceof RelatedPersonBean ? (RelatedPersonBean) this.authorConsenter : null;
    }
    public boolean hasAuthorConsenterAsPersonalRelationship() {
        return (this.authorConsenter instanceof RelatedPersonBean);
    }


    /**
     * <p>B:Consent Information Types</p>
     * 
     * <p><p>The type of patient information that can be accessed 
     * or modified. Examples are: demographics, medications, lab, 
     * DI, etc</p><p>The keyword revisioning process may also 
     * involve revising the list of information types covered by 
     * the keyword.</p></p>
     * 
     * <p><p>The type of patient information that can be accessed 
     * or modified. Examples are: demographics, medications, lab, 
     * DI, etc</p><p>The keyword revisioning process may also 
     * involve revising the list of information types covered by 
     * the keyword.</p></p>
     * 
     * <p><p>Different keywords may be needed to access different 
     * types of patient information (e.g. demographics, 
     * medications, allergies, lab results). Understanding the type 
     * of information the keyword applies to is critical, and 
     * therefore the attribute is mandatory.</p></p>
     */
    @Hl7XmlMapping({"subject/recordType/code"})
    public List<Code> getConsentInformationTypes() {
        return new RawListWrapper<CV, Code>(consentInformationTypes, CVImpl.class);
    }

}
