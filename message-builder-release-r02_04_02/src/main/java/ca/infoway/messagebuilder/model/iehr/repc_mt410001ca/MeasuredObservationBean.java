/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.iehr.repc_mt410001ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.BL;
import ca.infoway.messagebuilder.datatype.CD;
import ca.infoway.messagebuilder.datatype.CE;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.PQ;
import ca.infoway.messagebuilder.datatype.SET;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.BLImpl;
import ca.infoway.messagebuilder.datatype.impl.CDImpl;
import ca.infoway.messagebuilder.datatype.impl.CEImpl;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.PQImpl;
import ca.infoway.messagebuilder.datatype.impl.SETImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.datatype.lang.PhysicalQuantity;
import ca.infoway.messagebuilder.domainvalue.ObservationInterpretationNormality;
import ca.infoway.messagebuilder.domainvalue.SimpleMeasurableClinicalObservationType;
import ca.infoway.messagebuilder.domainvalue.x_BasicConfidentialityKind;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.common.coct_mt011001ca.CareCompositionsBean;
import ca.infoway.messagebuilder.model.common.coct_mt090108ca.HealthcareWorkerBean;
import ca.infoway.messagebuilder.model.common.coct_mt090508ca.HealthcareOrganizationBean;
import ca.infoway.messagebuilder.model.common.coct_mt911107ca.ActingPersonBean;
import ca.infoway.messagebuilder.model.merged.ActDefinitionBean;
import ca.infoway.messagebuilder.model.merged.BecauseOfBean;
import ca.infoway.messagebuilder.model.merged.HasNotesBean;
import ca.infoway.messagebuilder.model.merged.OccurredAtBean;
import ca.infoway.messagebuilder.model.merged.OldCommonObservationEventBean;
import ca.infoway.messagebuilder.model.merged.Patient_1Bean;
import ca.infoway.messagebuilder.model.merged.ServiceDeliveryLocation_2Bean;
import ca.infoway.messagebuilder.model.merged.SubObservationEvent_1Bean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;



/**
 * <p>Measured Observation</p>
 * 
 * <p><p>This record expresses a single point-in-time measured 
 * observation made about a patient.</p> <p>E.g. height, 
 * weight, blood pressure, mole diameter, gum depth, etc.</p> 
 * <p>Note: This transaction is not intended to deal with 
 * numeric 'scores'. Those are not considered measurements and 
 * should be handled using Coded Observation.</p></p>
 * 
 * <p>Observations are a key mechanism for capturing the state 
 * of a patient. Observations provide context for interventions 
 * subsequently taken. Observations can also be tracked over 
 * time to look for changes that may help in assessing a 
 * patient's health.</p>
 */
@Hl7PartTypeMapping({"REPC_MT410001CA.CommonObservationEvent"})
@Hl7RootType
public class MeasuredObservationBean extends MessagePartBean {

    private static final long serialVersionUID = 20100603L;
    private CD observationType = new CDImpl();
    private BL refutedIndicator = new BLImpl();
    private IVL<TS, Interval<Date>> observationPeriod = new IVLImpl<TS, Interval<Date>>();
    private SET<CV, Code> observationMaskingIndicators = new SETImpl<CV, Code>(CVImpl.class);
    private PQ observationValue = new PQImpl();
    private CE observationNormalityInterpretation = new CEImpl();
    private ServiceDeliveryLocation_2Bean indirectTargetServiceDeliveryLocation;
    private List<ca.infoway.messagebuilder.model.common.coct_mt911108ca.ActingPersonBean> performerActingPerson = new ArrayList<ca.infoway.messagebuilder.model.common.coct_mt911108ca.ActingPersonBean>();
    private ActingPersonBean informantActingPerson;
    private OccurredAtBean location;
    private RequestBean inFulfillmentOfActRequest;
    private List<ActDefinitionBean> definitionActDefinition = new ArrayList<ActDefinitionBean>();
    private List<OldCommonObservationEventBean> predecessorOldCommonObservationEvent = new ArrayList<OldCommonObservationEventBean>();
    private List<BecauseOfBean> reason = new ArrayList<BecauseOfBean>();
    private List<SubObservationEvent_1Bean> componentSubObservationEvent = new ArrayList<SubObservationEvent_1Bean>();
    private HasNotesBean subjectOf;
    private List<CareCompositionsBean> componentOfPatientCareProvisionEvent = new ArrayList<CareCompositionsBean>();

    @Hl7XmlMapping({"code"})
    public SimpleMeasurableClinicalObservationType getObservationType() {
        return (SimpleMeasurableClinicalObservationType) this.observationType.getValue();
    }
    public void setObservationType(SimpleMeasurableClinicalObservationType observationType) {
        this.observationType.setValue(observationType);
    }

    @Hl7XmlMapping({"negationInd"})
    public Boolean getRefutedIndicator() {
        return this.refutedIndicator.getValue();
    }
    public void setRefutedIndicator(Boolean refutedIndicator) {
        this.refutedIndicator.setValue(refutedIndicator);
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getObservationPeriod() {
        return this.observationPeriod.getValue();
    }
    public void setObservationPeriod(Interval<Date> observationPeriod) {
        this.observationPeriod.setValue(observationPeriod);
    }

    @Hl7XmlMapping({"confidentialityCode"})
    public Set<x_BasicConfidentialityKind> getObservationMaskingIndicators() {
        return this.observationMaskingIndicators.rawSet(x_BasicConfidentialityKind.class);
    }

    @Hl7XmlMapping({"value"})
    public PhysicalQuantity getObservationValue() {
        return this.observationValue.getValue();
    }
    public void setObservationValue(PhysicalQuantity observationValue) {
        this.observationValue.setValue(observationValue);
    }

    @Hl7XmlMapping({"interpretationCode"})
    public ObservationInterpretationNormality getObservationNormalityInterpretation() {
        return (ObservationInterpretationNormality) this.observationNormalityInterpretation.getValue();
    }
    public void setObservationNormalityInterpretation(ObservationInterpretationNormality observationNormalityInterpretation) {
        this.observationNormalityInterpretation.setValue(observationNormalityInterpretation);
    }

    @Hl7XmlMapping({"indirectTarget/serviceDeliveryLocation"})
    public ServiceDeliveryLocation_2Bean getIndirectTargetServiceDeliveryLocation() {
        return this.indirectTargetServiceDeliveryLocation;
    }
    public void setIndirectTargetServiceDeliveryLocation(ServiceDeliveryLocation_2Bean indirectTargetServiceDeliveryLocation) {
        this.indirectTargetServiceDeliveryLocation = indirectTargetServiceDeliveryLocation;
    }

    @Hl7XmlMapping({"performer/actingPerson"})
    public List<ca.infoway.messagebuilder.model.common.coct_mt911108ca.ActingPersonBean> getPerformerActingPerson() {
        return this.performerActingPerson;
    }

    @Hl7XmlMapping({"informant/actingPerson"})
    public ActingPersonBean getInformantActingPerson() {
        return this.informantActingPerson;
    }
    public void setInformantActingPerson(ActingPersonBean informantActingPerson) {
        this.informantActingPerson = informantActingPerson;
    }

    public HealthcareWorkerBean getInformantActingPersonAsAssignedEntity1() {
        return this.informantActingPerson instanceof HealthcareWorkerBean ? (HealthcareWorkerBean) this.informantActingPerson : null;
    }
    public boolean hasInformantActingPersonAsAssignedEntity1() {
        return (this.informantActingPerson instanceof HealthcareWorkerBean);
    }

    public HealthcareOrganizationBean getInformantActingPersonAsAssignedEntity2() {
        return this.informantActingPerson instanceof HealthcareOrganizationBean ? (HealthcareOrganizationBean) this.informantActingPerson : null;
    }
    public boolean hasInformantActingPersonAsAssignedEntity2() {
        return (this.informantActingPerson instanceof HealthcareOrganizationBean);
    }

    public Patient_1Bean getInformantActingPersonAsPatient() {
        return this.informantActingPerson instanceof Patient_1Bean ? (Patient_1Bean) this.informantActingPerson : null;
    }
    public boolean hasInformantActingPersonAsPatient() {
        return (this.informantActingPerson instanceof Patient_1Bean);
    }

    @Hl7XmlMapping({"location"})
    public OccurredAtBean getLocation() {
        return this.location;
    }
    public void setLocation(OccurredAtBean location) {
        this.location = location;
    }

    @Hl7XmlMapping({"inFulfillmentOf/actRequest"})
    public RequestBean getInFulfillmentOfActRequest() {
        return this.inFulfillmentOfActRequest;
    }
    public void setInFulfillmentOfActRequest(RequestBean inFulfillmentOfActRequest) {
        this.inFulfillmentOfActRequest = inFulfillmentOfActRequest;
    }

    @Hl7XmlMapping({"definition/actDefinition"})
    public List<ActDefinitionBean> getDefinitionActDefinition() {
        return this.definitionActDefinition;
    }

    @Hl7XmlMapping({"predecessor/oldCommonObservationEvent"})
    public List<OldCommonObservationEventBean> getPredecessorOldCommonObservationEvent() {
        return this.predecessorOldCommonObservationEvent;
    }

    @Hl7XmlMapping({"reason"})
    public List<BecauseOfBean> getReason() {
        return this.reason;
    }

    @Hl7XmlMapping({"component/subObservationEvent"})
    public List<SubObservationEvent_1Bean> getComponentSubObservationEvent() {
        return this.componentSubObservationEvent;
    }

    @Hl7XmlMapping({"subjectOf"})
    public HasNotesBean getSubjectOf() {
        return this.subjectOf;
    }
    public void setSubjectOf(HasNotesBean subjectOf) {
        this.subjectOf = subjectOf;
    }

    @Hl7XmlMapping({"componentOf/patientCareProvisionEvent"})
    public List<CareCompositionsBean> getComponentOfPatientCareProvisionEvent() {
        return this.componentOfPatientCareProvisionEvent;
    }

}
