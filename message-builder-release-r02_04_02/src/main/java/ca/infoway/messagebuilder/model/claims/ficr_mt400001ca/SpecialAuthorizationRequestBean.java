/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.claims.ficr_mt400001ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.SET;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.SETImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActPriority;
import ca.infoway.messagebuilder.domainvalue.x_BasicConfidentialityKind;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.merged.DevicePassThruBean;
import ca.infoway.messagebuilder.model.merged.HasNotesBean;
import ca.infoway.messagebuilder.model.merged.HealthDocumentAttachment_1Bean;
import ca.infoway.messagebuilder.model.merged.PolicyOrAccount_1Bean;
import ca.infoway.messagebuilder.model.merged.SpecialAuthorizationChoice_1Bean;
import ca.infoway.messagebuilder.model.merged.SpecialAuthorizationCriteriaBean;
import ca.infoway.messagebuilder.model.merged.SpecialAuthorizationRequestCrossReferenceBean;
import ca.infoway.messagebuilder.model.merged.SubstanceAdministrationBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;



@Hl7PartTypeMapping({"FICR_MT400001CA.SpecialAuthorizationRequest"})
@Hl7RootType
public class SpecialAuthorizationRequestBean extends MessagePartBean {

    private static final long serialVersionUID = 20100603L;
    private CV specialAuthorizationRequestType = new CVImpl();
    private IVL<TS, Interval<Date>> specialAuthorizationRequestEffectiveDate = new IVLImpl<TS, Interval<Date>>();
    private CV specialAuthorizationPriorityCode = new CVImpl();
    private SET<CV, Code> confidentialityRestrictionS = new SETImpl<CV, Code>(CVImpl.class);
    private FormRoleBean directTargetFormRole;
    private ContactPartyBean callBackContactContactParty;
    private SpecialAuthorizationRequestCrossReferenceBean predecessorSpecialAuthorizationRequestCrossReference;
    private List<SpecialAuthorizationCriteriaBean> supportSpecialAuthorizationCriteria = new ArrayList<SpecialAuthorizationCriteriaBean>();
    private SpecialAuthorizationChoice_1Bean subjectSpecialAuthorizationChoice;
    private PolicyOrAccount_1Bean coveragePolicyOrAccount;
    private List<HealthDocumentAttachment_1Bean> pertinentInformationHealthDocumentAttachment = new ArrayList<HealthDocumentAttachment_1Bean>();
    private List<HasNotesBean> subjectOf = new ArrayList<HasNotesBean>();

    @Hl7XmlMapping({"code"})
    public Code getSpecialAuthorizationRequestType() {
        return (Code) this.specialAuthorizationRequestType.getValue();
    }
    public void setSpecialAuthorizationRequestType(Code specialAuthorizationRequestType) {
        this.specialAuthorizationRequestType.setValue(specialAuthorizationRequestType);
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getSpecialAuthorizationRequestEffectiveDate() {
        return this.specialAuthorizationRequestEffectiveDate.getValue();
    }
    public void setSpecialAuthorizationRequestEffectiveDate(Interval<Date> specialAuthorizationRequestEffectiveDate) {
        this.specialAuthorizationRequestEffectiveDate.setValue(specialAuthorizationRequestEffectiveDate);
    }

    @Hl7XmlMapping({"priorityCode"})
    public ActPriority getSpecialAuthorizationPriorityCode() {
        return (ActPriority) this.specialAuthorizationPriorityCode.getValue();
    }
    public void setSpecialAuthorizationPriorityCode(ActPriority specialAuthorizationPriorityCode) {
        this.specialAuthorizationPriorityCode.setValue(specialAuthorizationPriorityCode);
    }

    @Hl7XmlMapping({"confidentialityCode"})
    public Set<x_BasicConfidentialityKind> getConfidentialityRestrictionS() {
        return this.confidentialityRestrictionS.rawSet(x_BasicConfidentialityKind.class);
    }

    @Hl7XmlMapping({"directTarget/formRole"})
    public FormRoleBean getDirectTargetFormRole() {
        return this.directTargetFormRole;
    }
    public void setDirectTargetFormRole(FormRoleBean directTargetFormRole) {
        this.directTargetFormRole = directTargetFormRole;
    }

    @Hl7XmlMapping({"callBackContact/contactParty"})
    public ContactPartyBean getCallBackContactContactParty() {
        return this.callBackContactContactParty;
    }
    public void setCallBackContactContactParty(ContactPartyBean callBackContactContactParty) {
        this.callBackContactContactParty = callBackContactContactParty;
    }

    @Hl7XmlMapping({"predecessor/specialAuthorizationRequestCrossReference"})
    public SpecialAuthorizationRequestCrossReferenceBean getPredecessorSpecialAuthorizationRequestCrossReference() {
        return this.predecessorSpecialAuthorizationRequestCrossReference;
    }
    public void setPredecessorSpecialAuthorizationRequestCrossReference(SpecialAuthorizationRequestCrossReferenceBean predecessorSpecialAuthorizationRequestCrossReference) {
        this.predecessorSpecialAuthorizationRequestCrossReference = predecessorSpecialAuthorizationRequestCrossReference;
    }

    @Hl7XmlMapping({"support/specialAuthorizationCriteria"})
    public List<SpecialAuthorizationCriteriaBean> getSupportSpecialAuthorizationCriteria() {
        return this.supportSpecialAuthorizationCriteria;
    }

    @Hl7XmlMapping({"subject/specialAuthorizationChoice"})
    public SpecialAuthorizationChoice_1Bean getSubjectSpecialAuthorizationChoice() {
        return this.subjectSpecialAuthorizationChoice;
    }
    public void setSubjectSpecialAuthorizationChoice(SpecialAuthorizationChoice_1Bean subjectSpecialAuthorizationChoice) {
        this.subjectSpecialAuthorizationChoice = subjectSpecialAuthorizationChoice;
    }

    public SubstanceAdministrationBean getSubjectSpecialAuthorizationChoiceAsSubstanceAdministration() {
        return this.subjectSpecialAuthorizationChoice instanceof SubstanceAdministrationBean ? (SubstanceAdministrationBean) this.subjectSpecialAuthorizationChoice : null;
    }
    public boolean hasSubjectSpecialAuthorizationChoiceAsSubstanceAdministration() {
        return (this.subjectSpecialAuthorizationChoice instanceof SubstanceAdministrationBean);
    }

    public DevicePassThruBean getSubjectSpecialAuthorizationChoiceAsDevicePassThru() {
        return this.subjectSpecialAuthorizationChoice instanceof DevicePassThruBean ? (DevicePassThruBean) this.subjectSpecialAuthorizationChoice : null;
    }
    public boolean hasSubjectSpecialAuthorizationChoiceAsDevicePassThru() {
        return (this.subjectSpecialAuthorizationChoice instanceof DevicePassThruBean);
    }

    @Hl7XmlMapping({"coverage/policyOrAccount"})
    public PolicyOrAccount_1Bean getCoveragePolicyOrAccount() {
        return this.coveragePolicyOrAccount;
    }
    public void setCoveragePolicyOrAccount(PolicyOrAccount_1Bean coveragePolicyOrAccount) {
        this.coveragePolicyOrAccount = coveragePolicyOrAccount;
    }

    @Hl7XmlMapping({"pertinentInformation/healthDocumentAttachment"})
    public List<HealthDocumentAttachment_1Bean> getPertinentInformationHealthDocumentAttachment() {
        return this.pertinentInformationHealthDocumentAttachment;
    }

    @Hl7XmlMapping({"subjectOf"})
    public List<HasNotesBean> getSubjectOf() {
        return this.subjectOf;
    }

}
