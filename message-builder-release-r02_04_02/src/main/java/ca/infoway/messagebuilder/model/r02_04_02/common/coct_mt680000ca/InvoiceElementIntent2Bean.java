/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.r02_04_02.common.coct_mt680000ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.INT;
import ca.infoway.messagebuilder.datatype.MO;
import ca.infoway.messagebuilder.datatype.PQ;
import ca.infoway.messagebuilder.datatype.RTO;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.INTImpl;
import ca.infoway.messagebuilder.datatype.impl.MOImpl;
import ca.infoway.messagebuilder.datatype.impl.PQImpl;
import ca.infoway.messagebuilder.datatype.impl.RTOImpl;
import ca.infoway.messagebuilder.datatype.lang.Money;
import ca.infoway.messagebuilder.datatype.lang.PhysicalQuantity;
import ca.infoway.messagebuilder.datatype.lang.Ratio;
import ca.infoway.messagebuilder.model.MessagePartBean;



@Hl7PartTypeMapping({"COCT_MT680000CA.InvoiceElementIntent2"})
public class InvoiceElementIntent2Bean extends MessagePartBean implements ca.infoway.messagebuilder.model.r02_04_02.merged.InvoiceElementChoice {

    private static final long serialVersionUID = 20110318L;
    private CV genericServiceCodes = new CVImpl();
    private MO totalAmountBilledForLineItemElements = new MOImpl();
    private INT factorNumber = new INTImpl();
    private RTO<Money, PhysicalQuantity> pricePerUnit = new RTOImpl<Money, PhysicalQuantity>();
    private PQ unitQuantity = new PQImpl();


    /**
     * <p>Generic Service Codes</p>
     * 
     * <p><p>Domain for InvoiceElementIntent2.code is 
     * GenericBillableItemModifier</p></p>
     * 
     * <p><p>(Product/Service Code e.g. Office Visit ,Taxes, 
     * Markup, Dispense, including Product/Service Code Modifier 
     * e.g. northern isolation, off hours specialty, on call</p></p>
     */
    @Hl7XmlMapping({"code"})
    public Code getGenericServiceCodes() {
        return (Code) this.genericServiceCodes.getValue();
    }
    public void setGenericServiceCodes(Code genericServiceCodes) {
        this.genericServiceCodes.setValue(genericServiceCodes);
    }


    /**
     * <p>Total amount billed for line item/elements.</p>
     * 
     * <p><p>(= unit_qty * unit_price_amt * factor_nbr * 
     * points_nbr. E.g. $150 CAD</p></p>
     */
    @Hl7XmlMapping({"netAmt"})
    public Money getTotalAmountBilledForLineItemElements() {
        return this.totalAmountBilledForLineItemElements.getValue();
    }
    public void setTotalAmountBilledForLineItemElements(Money totalAmountBilledForLineItemElements) {
        this.totalAmountBilledForLineItemElements.setValue(totalAmountBilledForLineItemElements);
    }


    /**
     * <p>Factor Number</p>
     * 
     * <p><p>multiplier, can be used for tax percentages such as 
     * 0.07</p></p>
     */
    @Hl7XmlMapping({"factorNumber"})
    public Integer getFactorNumber() {
        return this.factorNumber.getValue();
    }
    public void setFactorNumber(Integer factorNumber) {
        this.factorNumber.setValue(factorNumber);
    }


    /**
     * <p>Price per unit</p>
     * 
     * <p><p>e.g. $50 CAD/ 1 {box}</p></p>
     */
    @Hl7XmlMapping({"unitPriceAmt"})
    public Ratio<Money, PhysicalQuantity> getPricePerUnit() {
        return this.pricePerUnit.getValue();
    }
    public void setPricePerUnit(Ratio<Money, PhysicalQuantity> pricePerUnit) {
        this.pricePerUnit.setValue(pricePerUnit);
    }


    /**
     * <p>Unit Quantity</p>
     * 
     * <p><p>e.g. 3 {boxes}</p></p>
     */
    @Hl7XmlMapping({"unitQuantity"})
    public PhysicalQuantity getUnitQuantity() {
        return this.unitQuantity.getValue();
    }
    public void setUnitQuantity(PhysicalQuantity unitQuantity) {
        this.unitQuantity.setValue(unitQuantity);
    }

}
