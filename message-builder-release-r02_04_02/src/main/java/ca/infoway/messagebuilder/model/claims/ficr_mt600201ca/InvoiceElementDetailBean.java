/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.claims.ficr_mt600201ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.MO;
import ca.infoway.messagebuilder.datatype.PQ;
import ca.infoway.messagebuilder.datatype.REAL;
import ca.infoway.messagebuilder.datatype.RTO;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.MOImpl;
import ca.infoway.messagebuilder.datatype.impl.PQImpl;
import ca.infoway.messagebuilder.datatype.impl.REALImpl;
import ca.infoway.messagebuilder.datatype.impl.RTOImpl;
import ca.infoway.messagebuilder.datatype.impl.RawListWrapper;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Money;
import ca.infoway.messagebuilder.datatype.lang.PhysicalQuantity;
import ca.infoway.messagebuilder.datatype.lang.Ratio;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.common.coct_mt280001ca.A_BillableActChoice;
import ca.infoway.messagebuilder.model.common.coct_mt280001ca.PreviousBillableActCrossReferenceBean;
import ca.infoway.messagebuilder.model.common.coct_mt290000ca.BillableClinicalServiceBean;
import ca.infoway.messagebuilder.model.common.coct_mt300000ca.SupplyEventBean;
import ca.infoway.messagebuilder.model.common.coct_mt490000ca.BillableClinicalProductBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;



/**
 * <p><p>RTO used to specify 15 pills (each) out of a bottle of 
 * 100 pills (each) to reflect billing for a portion of a 
 * package (e.g. 0.15 of a bottle)</p></p>
 */
@Hl7PartTypeMapping({"FICR_MT600201CA.InvoiceElementDetail"})
public class InvoiceElementDetailBean extends MessagePartBean implements InvoiceElementChoice {

    private static final long serialVersionUID = 20110126L;
    private MO submittedInvoiceLineAmount = new MOImpl();
    private CV submittedProductServiceCode = new CVImpl();
    private II submittedInvoiceLineIdentifier = new IIImpl();
    private PQ submittedUnitQuantity = new PQImpl();
    private REAL multiplierEG007 = new REALImpl();
    private List<A_BillableActChoice> reasonOfBillableActChoice = new ArrayList<A_BillableActChoice>();
    private RTO<Money, PhysicalQuantity> submittedUnitAmountPrice = new RTOImpl<Money, PhysicalQuantity>();


    /**
     * <p>Submitted Invoice Line Amount</p>
     */
    @Hl7XmlMapping({"netAmt"})
    public Money getSubmittedInvoiceLineAmount() {
        return this.submittedInvoiceLineAmount.getValue();
    }
    public void setSubmittedInvoiceLineAmount(Money submittedInvoiceLineAmount) {
        this.submittedInvoiceLineAmount.setValue(submittedInvoiceLineAmount);
    }


    /**
     * <p>Submitted Product/Service Code</p>
     */
    @Hl7XmlMapping({"code"})
    public Code getSubmittedProductServiceCode() {
        return (Code) this.submittedProductServiceCode.getValue();
    }
    public void setSubmittedProductServiceCode(Code submittedProductServiceCode) {
        this.submittedProductServiceCode.setValue(submittedProductServiceCode);
    }


    /**
     * <p>Submitted Invoice Line Identifier</p>
     */
    @Hl7XmlMapping({"id"})
    public Identifier getSubmittedInvoiceLineIdentifier() {
        return this.submittedInvoiceLineIdentifier.getValue();
    }
    public void setSubmittedInvoiceLineIdentifier(Identifier submittedInvoiceLineIdentifier) {
        this.submittedInvoiceLineIdentifier.setValue(submittedInvoiceLineIdentifier);
    }


    /**
     * <p>Submitted Unit Quantity</p>
     */
    @Hl7XmlMapping({"unitQuantity"})
    public PhysicalQuantity getSubmittedUnitQuantity() {
        return this.submittedUnitQuantity.getValue();
    }
    public void setSubmittedUnitQuantity(PhysicalQuantity submittedUnitQuantity) {
        this.submittedUnitQuantity.setValue(submittedUnitQuantity);
    }


    /**
     * <p>Multiplier, e.g. 0.07</p>
     */
    @Hl7XmlMapping({"factorNumber"})
    public BigDecimal getMultiplierEG007() {
        return this.multiplierEG007.getValue();
    }


    @Hl7XmlMapping({"reasonOf/billableActChoice"})
    public List<A_BillableActChoice> getReasonOfBillableActChoice() {
        return this.reasonOfBillableActChoice;
    }


    /**
     * <p>Submitted Unit Amount Price</p>
     */
    @Hl7XmlMapping({"unitPriceAmt"})
    public Ratio<Money, PhysicalQuantity> getSubmittedUnitAmountPrice() {
        return this.submittedUnitAmountPrice.getValue();
    }
    public void setSubmittedUnitAmountPrice(Ratio<Money, PhysicalQuantity> submittedUnitAmountPrice) {
        this.submittedUnitAmountPrice.setValue(submittedUnitAmountPrice);
    }

}
