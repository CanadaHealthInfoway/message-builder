/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.merged;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.BL;
import ca.infoway.messagebuilder.datatype.CE;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.BLImpl;
import ca.infoway.messagebuilder.datatype.impl.CEImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ParticipationMode;
import ca.infoway.messagebuilder.model.MessagePartBean;
import java.util.Date;



@Hl7PartTypeMapping({"POIZ_MT030050CA.Consent","POIZ_MT030060CA.Consent","POIZ_MT060150CA.Consent"})
public class ConsentBean extends MessagePartBean {

    private static final long serialVersionUID = 20100603L;
    private II consentID = new IIImpl();
    private BL consentWitheldIndicator = new BLImpl();
    private IVL<TS, Interval<Date>> consentEffectiveAndEndTime = new IVLImpl<TS, Interval<Date>>();
    private ConsentGivenToBean receiver;
    private CE consentMethod = new CEImpl();
    private Consenter_1Bean responsiblePartyConsenter;

    @Hl7XmlMapping({"id"})
    public Identifier getConsentID() {
        return this.consentID.getValue();
    }
    public void setConsentID(Identifier consentID) {
        this.consentID.setValue(consentID);
    }

    @Hl7XmlMapping({"negationInd"})
    public Boolean getConsentWitheldIndicator() {
        return this.consentWitheldIndicator.getValue();
    }
    public void setConsentWitheldIndicator(Boolean consentWitheldIndicator) {
        this.consentWitheldIndicator.setValue(consentWitheldIndicator);
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getConsentEffectiveAndEndTime() {
        return this.consentEffectiveAndEndTime.getValue();
    }
    public void setConsentEffectiveAndEndTime(Interval<Date> consentEffectiveAndEndTime) {
        this.consentEffectiveAndEndTime.setValue(consentEffectiveAndEndTime);
    }

    @Hl7XmlMapping({"receiver"})
    public ConsentGivenToBean getReceiver() {
        return this.receiver;
    }
    public void setReceiver(ConsentGivenToBean receiver) {
        this.receiver = receiver;
    }

    @Hl7XmlMapping({"responsibleParty/modeCode"})
    public ParticipationMode getConsentMethod() {
        return (ParticipationMode) this.consentMethod.getValue();
    }
    public void setConsentMethod(ParticipationMode consentMethod) {
        this.consentMethod.setValue(consentMethod);
    }

    @Hl7XmlMapping({"responsibleParty/consenter"})
    public Consenter_1Bean getResponsiblePartyConsenter() {
        return this.responsiblePartyConsenter;
    }
    public void setResponsiblePartyConsenter(Consenter_1Bean responsiblePartyConsenter) {
        this.responsiblePartyConsenter = responsiblePartyConsenter;
    }

    public Patient_2Bean getResponsiblePartyConsenterAsPatient() {
        return this.responsiblePartyConsenter instanceof Patient_2Bean ? (Patient_2Bean) this.responsiblePartyConsenter : null;
    }
    public boolean hasResponsiblePartyConsenterAsPatient() {
        return (this.responsiblePartyConsenter instanceof Patient_2Bean);
    }

    public RelatedPersonBean getResponsiblePartyConsenterAsPersonalRelationship() {
        return this.responsiblePartyConsenter instanceof RelatedPersonBean ? (RelatedPersonBean) this.responsiblePartyConsenter : null;
    }
    public boolean hasResponsiblePartyConsenterAsPersonalRelationship() {
        return (this.responsiblePartyConsenter instanceof RelatedPersonBean);
    }

}
