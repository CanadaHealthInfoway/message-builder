/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 16:47:15 -0300 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */

/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.ab_mr2007_v02_r02.merged;

import ca.infoway.messagebuilder.annotation.Hl7MapByPartType;
import ca.infoway.messagebuilder.annotation.Hl7MapByPartTypes;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CS;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.ST;
import ca.infoway.messagebuilder.datatype.TEL;
import ca.infoway.messagebuilder.datatype.impl.CSImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.STImpl;
import ca.infoway.messagebuilder.datatype.impl.TELImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.TelecommunicationAddress;
import ca.infoway.messagebuilder.domainvalue.CommunicationFunctionType;
import ca.infoway.messagebuilder.domainvalue.EntityClass;
import ca.infoway.messagebuilder.domainvalue.EntityDeterminer;
import ca.infoway.messagebuilder.model.MessagePartBean;



@Hl7PartTypeMapping({"MCCI_MT000100CA.Receiver","MCCI_MT000300CA.Receiver","MCCI_MT002100CA.Receiver","MCCI_MT002200CA.Receiver","MCCI_MT102001CA.Receiver"})
public class ReceiverBean extends MessagePartBean {

    private static final long serialVersionUID = 20120122L;
    private TEL telecom = new TELImpl();
    private II deviceId = new IIImpl();
    private ST deviceName = new STImpl();
    private II deviceAgentAgentOrganizationId = new IIImpl();
    private II deviceAsLocatedEntityLocationId = new IIImpl();
    private CS typeCode = new CSImpl();
    private CS deviceClassCode = new CSImpl();
    private CS deviceDeterminerCode = new CSImpl();


    /**
     * <p>ReceiverNetworkAddress</p>
     * 
     * <p>JB:Receiver Network Address</p>
     * 
     * <p><p>The address to which this message is being sent.</p></p>
     * 
     * <p><p>soap:Header\wsa:To</p></p>
     * 
     * <p><p>Indicates where the message should be sent. This is 
     * optional because not all environments require network 
     * addresses. It is mandatory when communicating using 
     * SOAP.</p></p>
     * 
     * <p>JB:Receiver Network Address</p>
     * 
     * <p><p>The address to which this message is being sent.</p></p>
     * 
     * <p><p>Indicates where the message should be sent. This is 
     * optional because not all environments require network 
     * addresses.</p></p>
     */
    @Hl7XmlMapping({"telecom"})
    public TelecommunicationAddress getTelecom() {
        return this.telecom.getValue();
    }
    public void setTelecom(TelecommunicationAddress telecom) {
        this.telecom.setValue(telecom);
    }


    /**
     * <p>ReceiverApplicationIdentifier</p>
     * 
     * <p>JA:Receiver Application Identifier</p>
     * 
     * <p><p>The unique identifier of the application to which the 
     * message is being sent.</p></p>
     * 
     * <p><p>soap:Header\wsa:To\@endpointID</p></p>
     * 
     * <p><p>Used for routing and for verification that &quot;yes, 
     * this message is intended for me.&quot; This is mandatory 
     * because it is the key identifier of the receiving 
     * application.</p></p>
     * 
     * <p>JA:Receiver Application Identifier</p>
     * 
     * <p><p>The unique identifier of the application to which the 
     * message is being sent.</p></p>
     * 
     * <p><p>Used for routing and for verification that &quot;yes, 
     * this message is intended for me.&quot; This is mandatory 
     * because it is the key identifier of the receiving 
     * application.</p></p>
     */
    @Hl7XmlMapping({"device/id"})
    public Identifier getDeviceId() {
        return this.deviceId.getValue();
    }
    public void setDeviceId(Identifier deviceId) {
        this.deviceId.setValue(deviceId);
    }


    /**
     * <p>JE:Receiver Application Name</p>
     * 
     * <p><p>Name of receiver application.</p></p>
     * 
     * <p>JE:Receiver Application Name</p>
     * 
     * <p><p>Name of receiver application.</p></p>
     * 
     * <p><p>Optional name of receiver application</p></p>
     * 
     * <p>JE:Receiving Application Name</p>
     * 
     * <p><p>Name of the receiving application.</p></p>
     * 
     * <p><p>Optional name of the receiving application.</p></p>
     */
    @Hl7XmlMapping({"device/name"})
    public String getDeviceName() {
        return this.deviceName.getValue();
    }
    public void setDeviceName(String deviceName) {
        this.deviceName.setValue(deviceName);
    }


    /**
     * <p>ReceiverOrganizationIdentifier</p>
     * 
     * <p>JC:Receiver Organization Identifier</p>
     * 
     * <p><p>The unique identifier of the organization with 
     * responsibility to act on the contents of this message.</p></p>
     * 
     * <p><p>Important when the eventual entity responsible for 
     * acting on an interaction may be reached through several 
     * routing steps. This attribute is optional because not all 
     * environments require communicating this information.</p></p>
     * 
     * <p>JK:Receiver Organization Identifier</p>
     * 
     * <p><p>Name of receiver application.</p></p>
     * 
     * <p><p>Identifier is the only non-structure attribute in this 
     * class and is therefore mandatory. The agent association from 
     * the receiver device (application) to the agent role is 
     * optional.</p></p>
     * 
     * <p>JK:Receiver Organization Identifier</p>
     * 
     * <p><p>Receiver organization.</p></p>
     * 
     * <p><p>The identifier of the receiver organization. This is 
     * the only non-structural attribute in this class and is 
     * therefore mandatory. Receiver organization is optional (as 
     * the scoper association from the receiver application is 
     * optional).</p></p>
     * 
     * <p>JK:Receiver Organization Identifier</p>
     * 
     * <p><p>Unique identifier for the receiver organization.</p></p>
     * 
     * <p><p>The identifier is the only non-structural attribute in 
     * this class and is therefore mandatory. The association from 
     * receiver device to agent is optional.</p></p>
     */
    @Hl7XmlMapping({"device/agent/agentOrganization/id","device/asAgent/representedOrganization/id"})
    @Hl7MapByPartTypes({
        @Hl7MapByPartType(name="device", type="MCCI_MT000100CA.Device2"),
        @Hl7MapByPartType(name="device", type="MCCI_MT000300CA.Device2"),
        @Hl7MapByPartType(name="device", type="MCCI_MT002100CA.Device2"),
        @Hl7MapByPartType(name="device", type="MCCI_MT002200CA.Device2"),
        @Hl7MapByPartType(name="device", type="MCCI_MT102001CA.Device2"),
        @Hl7MapByPartType(name="device/agent", type="MCCI_MT002100CA.Agent"),
        @Hl7MapByPartType(name="device/agent", type="MCCI_MT002200CA.Agent2"),
        @Hl7MapByPartType(name="device/agent", type="MCCI_MT102001CA.Agent2"),
        @Hl7MapByPartType(name="device/agent/agentOrganization", type="MCCI_MT002100CA.Organization"),
        @Hl7MapByPartType(name="device/agent/agentOrganization", type="MCCI_MT002200CA.Organization2"),
        @Hl7MapByPartType(name="device/agent/agentOrganization", type="MCCI_MT102001CA.Organization2"),
        @Hl7MapByPartType(name="device/asAgent", type="MCCI_MT000100CA.Agent2"),
        @Hl7MapByPartType(name="device/asAgent", type="MCCI_MT000300CA.Agent2"),
        @Hl7MapByPartType(name="device/asAgent/representedOrganization", type="MCCI_MT000100CA.Organization2"),
        @Hl7MapByPartType(name="device/asAgent/representedOrganization", type="MCCI_MT000300CA.Organization2")})
    public Identifier getDeviceAgentAgentOrganizationId() {
        return this.deviceAgentAgentOrganizationId.getValue();
    }
    public void setDeviceAgentAgentOrganizationId(Identifier deviceAgentAgentOrganizationId) {
        this.deviceAgentAgentOrganizationId.setValue(deviceAgentAgentOrganizationId);
    }


    /**
     * <p>ReceiverFacilityIdentifier</p>
     * 
     * <p>JD:Receiver Facility Identifier</p>
     * 
     * <p><p>Identifies the facility expected to receive the 
     * message.</p></p>
     * 
     * <p><p>May be used to assist in routing the message. This 
     * attribute is optional because not all environments require 
     * communicating this information.</p></p>
     */
    @Hl7XmlMapping({"device/asLocatedEntity/location/id"})
    public Identifier getDeviceAsLocatedEntityLocationId() {
        return this.deviceAsLocatedEntityLocationId.getValue();
    }
    public void setDeviceAsLocatedEntityLocationId(Identifier deviceAsLocatedEntityLocationId) {
        this.deviceAsLocatedEntityLocationId.setValue(deviceAsLocatedEntityLocationId);
    }


    @Hl7XmlMapping({"typeCode"})
    public CommunicationFunctionType getTypeCode() {
        return (CommunicationFunctionType) this.typeCode.getValue();
    }
    public void setTypeCode(CommunicationFunctionType typeCode) {
        this.typeCode.setValue(typeCode);
    }


    @Hl7XmlMapping({"device/classCode"})
    public EntityClass getDeviceClassCode() {
        return (EntityClass) this.deviceClassCode.getValue();
    }
    public void setDeviceClassCode(EntityClass deviceClassCode) {
        this.deviceClassCode.setValue(deviceClassCode);
    }


    @Hl7XmlMapping({"device/determinerCode"})
    public EntityDeterminer getDeviceDeterminerCode() {
        return (EntityDeterminer) this.deviceDeterminerCode.getValue();
    }
    public void setDeviceDeterminerCode(EntityDeterminer deviceDeterminerCode) {
        this.deviceDeterminerCode.setValue(deviceDeterminerCode);
    }

}
