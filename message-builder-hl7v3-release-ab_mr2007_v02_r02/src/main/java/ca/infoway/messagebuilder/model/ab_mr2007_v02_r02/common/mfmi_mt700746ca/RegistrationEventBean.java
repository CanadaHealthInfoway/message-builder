/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 15:47:15 -0400 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.ab_mr2007_v02_r02.common.mfmi_mt700746ca;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CS;
import ca.infoway.messagebuilder.datatype.impl.CSImpl;
import ca.infoway.messagebuilder.domainvalue.ActClass;
import ca.infoway.messagebuilder.domainvalue.ActMood;
import ca.infoway.messagebuilder.domainvalue.ActStatus;
import ca.infoway.messagebuilder.domainvalue.ContextControl;
import ca.infoway.messagebuilder.domainvalue.ParticipationType;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.ab_mr2007_v02_r02.common.merged.RegisteredItemBean;
import ca.infoway.messagebuilder.model.ab_mr2007_v02_r02.common.merged.ReplacesBean;
import ca.infoway.messagebuilder.model.ab_mr2007_v02_r02.merged.EHRRepositoryBean;
import java.util.ArrayList;
import java.util.List;



/**
 * <p>Business Name: Registration Event</p>
 * 
 * <p>This class contains information relevant to the 
 * registration of the payload item(s) into the Master File or 
 * Registry. This message is a response to a request to 
 * register (therefore, the mood is an event).</p>
 * 
 * <p>The RegistrationProcess act is the focal act of the 
 * message and therefore is mandatory</p>
 */
@Hl7PartTypeMapping({"MFMI_MT700746CA.RegistrationEvent"})
public class RegistrationEventBean<RR> extends MessagePartBean {

    private static final long serialVersionUID = 20130103L;
    private CS classCode = new CSImpl();
    private CS moodCode = new CSImpl();
    private CS statusCode = new CSImpl();
    private RegisteredItemBean<RR> subject;
    private CS custodianTypeCode = new CSImpl();
    private CS custodianContextControlCode = new CSImpl();
    private EHRRepositoryBean custodianAssignedDevice;
    private List<ReplacesBean> replacementOf = new ArrayList<ReplacesBean>();


    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.classCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"classCode"})
    public ActClass getClassCode() {
        return (ActClass) this.classCode.getValue();
    }

    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.classCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setClassCode(ActClass classCode) {
        this.classCode.setValue(classCode);
    }


    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"moodCode"})
    public ActMood getMoodCode() {
        return (ActMood) this.moodCode.getValue();
    }

    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setMoodCode(ActMood moodCode) {
        this.moodCode.setValue(moodCode);
    }


    /**
     * <p>Relationship: 
     * MFMI_MT700746CA.RegistrationEvent.statusCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"statusCode"})
    public ActStatus getStatusCode() {
        return (ActStatus) this.statusCode.getValue();
    }

    /**
     * <p>Relationship: 
     * MFMI_MT700746CA.RegistrationEvent.statusCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setStatusCode(ActStatus statusCode) {
        this.statusCode.setValue(statusCode);
    }


    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.subject</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"subject"})
    public RegisteredItemBean<RR> getSubject() {
        return this.subject;
    }

    /**
     * <p>Relationship: MFMI_MT700746CA.RegistrationEvent.subject</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setSubject(RegisteredItemBean<RR> subject) {
        this.subject = subject;
    }


    /**
     * <p>Relationship: MFMI_MT700746CA.Custodian.typeCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"custodian/typeCode"})
    public ParticipationType getCustodianTypeCode() {
        return (ParticipationType) this.custodianTypeCode.getValue();
    }

    /**
     * <p>Relationship: MFMI_MT700746CA.Custodian.typeCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setCustodianTypeCode(ParticipationType custodianTypeCode) {
        this.custodianTypeCode.setValue(custodianTypeCode);
    }


    /**
     * <p>Relationship: 
     * MFMI_MT700746CA.Custodian.contextControlCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"custodian/contextControlCode"})
    public ContextControl getCustodianContextControlCode() {
        return (ContextControl) this.custodianContextControlCode.getValue();
    }

    /**
     * <p>Relationship: 
     * MFMI_MT700746CA.Custodian.contextControlCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setCustodianContextControlCode(ContextControl custodianContextControlCode) {
        this.custodianContextControlCode.setValue(custodianContextControlCode);
    }


    /**
     * <p>Relationship: MFMI_MT700746CA.Custodian.assignedDevice</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"custodian/assignedDevice"})
    public EHRRepositoryBean getCustodianAssignedDevice() {
        return this.custodianAssignedDevice;
    }

    /**
     * <p>Relationship: MFMI_MT700746CA.Custodian.assignedDevice</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setCustodianAssignedDevice(EHRRepositoryBean custodianAssignedDevice) {
        this.custodianAssignedDevice = custodianAssignedDevice;
    }


    /**
     * <p>Relationship: 
     * MFMI_MT700746CA.RegistrationEvent.replacementOf</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-10)</p>
     */
    @Hl7XmlMapping({"replacementOf"})
    public List<ReplacesBean> getReplacementOf() {
        return this.replacementOf;
    }

}
