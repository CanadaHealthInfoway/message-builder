/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 16:47:15 -0300 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.polb_mt004000ca;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.ANY;
import ca.infoway.messagebuilder.datatype.BL;
import ca.infoway.messagebuilder.datatype.CD;
import ca.infoway.messagebuilder.datatype.CS;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.SET;
import ca.infoway.messagebuilder.datatype.ST;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.ANYImpl;
import ca.infoway.messagebuilder.datatype.impl.BLImpl;
import ca.infoway.messagebuilder.datatype.impl.CDImpl;
import ca.infoway.messagebuilder.datatype.impl.CSImpl;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.SETImpl;
import ca.infoway.messagebuilder.datatype.impl.STImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActStatus;
import ca.infoway.messagebuilder.domainvalue.ObservationInterpretation;
import ca.infoway.messagebuilder.domainvalue.ObservationMethod;
import ca.infoway.messagebuilder.domainvalue.x_BasicConfidentialityKind;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.coct_mt130001ca.VersionInformationBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.merged.AssignedEntityBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.merged.HealthcareOrganizationBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.merged.Patient_1Bean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.domainvalue.LabResultReportingProcessStepCode;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.domainvalue.ObservationResultableLabType;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.merged.ElectronicResultReceiverBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.merged.FulfillmentChoice;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.merged.ReportSectionSpecimenBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.merged.ReportableHealthIndicatorBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.merged.SupportingClinicalInformationBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.polb_mt001001ca.BatteryOrPanelBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.polb_mt001001ca.ObservationRequestBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.polb_mt001001ca.PlacerGroupBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.lab.polb_mt001001ca.RequestChoice;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.merged.IncludesBean;
import ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.merged.RoleChoice;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;



/**
 * <p>Business Name: Derivation</p>
 * 
 * <p>Used to document a result and component result parts from 
 * which the conclusive or interpretive result was drawn or 
 * derived.</p>
 */
@Hl7PartTypeMapping({"POLB_MT004000CA.DerivedFrom"})
public class DerivationBean extends MessagePartBean {

    private static final long serialVersionUID = 20130614L;
    private BL inversionInd = new BLImpl();
    private SET<II, Identifier> observationEventId = new SETImpl<II, Identifier>(IIImpl.class);
    private CD observationEventCode = new CDImpl();
    private ST observationEventText = new STImpl();
    private CS observationEventStatusCode = new CSImpl();
    private IVL<TS, Interval<Date>> observationEventEffectiveTime = new IVLImpl<TS, Interval<Date>>();
    private SET<CV, Code> observationEventConfidentialityCode = new SETImpl<CV, Code>(CVImpl.class);
    private ANY<Object> observationEventValue = new ANYImpl<Object>();
    private CV observationEventInterpretationCode = new CVImpl();
    private CV observationEventMethodCode = new CVImpl();
    private List<ReportSectionSpecimenBean> observationEventSpecimen = new ArrayList<ReportSectionSpecimenBean>();
    private Patient_1Bean observationEventRecordTargetPatient;
    private List<ElectronicResultReceiverBean> observationEventReceiver = new ArrayList<ElectronicResultReceiverBean>();
    private RoleChoice observationEventPerformerRoleChoice;
    private PrimaryInformationRecipientBean observationEventPrimaryInformationRecipient;
    private FulfillmentChoice observationEventInFulfillmentOfFulfillmentChoice;
    private List<DerivationBean> observationEventDerivedFrom = new ArrayList<DerivationBean>();
    private ReferenceRangeBean observationEventReferenceRangeInterpretationRange;
    private II observationEventPertinentInformation1OutbreakEventId = new IIImpl();
    private SupportingClinicalInformationBean observationEventPertinentInformation2SupportingClinicalObservationEvent;
    private ST observationEventComponent1ResultSortKeyText = new STImpl();
    private ReportableHealthIndicatorBean observationEventComponent2ReportableTestIndicator;
    private ResultChoice observationEventComponent3ResultChoice;
    private VersionInformationBean observationEventSubjectOf1ControlActEvent;
    private List<IncludesBean> observationEventSubjectOf2 = new ArrayList<IncludesBean>();
    private CD observationEventSubjectOf3ResultStatusProcessStepCode = new CDImpl();


    /**
     * <p>Relationship: POLB_MT004000CA.DerivedFrom.inversionInd</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"inversionInd"})
    public Boolean getInversionInd() {
        return this.inversionInd.getValue();
    }

    /**
     * <p>Relationship: POLB_MT004000CA.DerivedFrom.inversionInd</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setInversionInd(Boolean inversionInd) {
        this.inversionInd.setValue(inversionInd);
    }


    /**
     * <p>Business Name: Result Observation Identifier</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.id</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1-2)</p>
     * 
     * <p>Unique identifiers are required for result revisions, 
     * etc.</p>
     * 
     * <p>Unique identifier for this lab result observation.</p>
     */
    @Hl7XmlMapping({"observationEvent/id"})
    public Set<Identifier> getObservationEventId() {
        return this.observationEventId.rawSet();
    }


    /**
     * <p>Business Name: Result Observation Type</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.code</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>Describes the type of lab result observation e.g. 
     * analyte. The code is bound to the LOINC domain. The LOINC 
     * codes &quot;carry&quot; other attributed information such as 
     * method. In those cases where the method is part of the 
     * LOINC, it is up to the implementation to determine whether 
     * to also populate the methodCode attribute. The methodCode 
     * attribute is provided for those cases where the LOINC code 
     * is also not specific or granular enough for this result.</p>
     */
    @Hl7XmlMapping({"observationEvent/code"})
    public ObservationResultableLabType getObservationEventCode() {
        return (ObservationResultableLabType) this.observationEventCode.getValue();
    }

    /**
     * <p>Business Name: Result Observation Type</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.code</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>Describes the type of lab result observation e.g. 
     * analyte. The code is bound to the LOINC domain. The LOINC 
     * codes &quot;carry&quot; other attributed information such as 
     * method. In those cases where the method is part of the 
     * LOINC, it is up to the implementation to determine whether 
     * to also populate the methodCode attribute. The methodCode 
     * attribute is provided for those cases where the LOINC code 
     * is also not specific or granular enough for this result.</p>
     */
    public void setObservationEventCode(ObservationResultableLabType observationEventCode) {
        this.observationEventCode.setValue(observationEventCode);
    }


    /**
     * <p>Business Name: Result Observation Text</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.text</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     * 
     * <p>Used to document any act information not covered by the 
     * other attribution or value sets.</p>
     * 
     * <p>Contains any text-based descriptive text regarding or in 
     * support of this observation.</p>
     */
    @Hl7XmlMapping({"observationEvent/text"})
    public String getObservationEventText() {
        return this.observationEventText.getValue();
    }

    /**
     * <p>Business Name: Result Observation Text</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.text</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     * 
     * <p>Used to document any act information not covered by the 
     * other attribution or value sets.</p>
     * 
     * <p>Contains any text-based descriptive text regarding or in 
     * support of this observation.</p>
     */
    public void setObservationEventText(String observationEventText) {
        this.observationEventText.setValue(observationEventText);
    }


    /**
     * <p>Business Name: Result Observation Status</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.statusCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>The statusCode represents the &quot;state&quot; of the 
     * act e.g. active=in progress or not yet started, 
     * complete=final.</p>
     * 
     * <p>The status or state of the result observation. The 
     * statusCode is not as fine-grained as lab reporting statuses 
     * such as preliminary. A &quot;preliminary&quot; result is a 
     * result whose statusCode=active and ProcessStep (procedure 
     * event) valued &quot;preliminary&quot;.</p>
     */
    @Hl7XmlMapping({"observationEvent/statusCode"})
    public ActStatus getObservationEventStatusCode() {
        return (ActStatus) this.observationEventStatusCode.getValue();
    }

    /**
     * <p>Business Name: Result Observation Status</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.statusCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>The statusCode represents the &quot;state&quot; of the 
     * act e.g. active=in progress or not yet started, 
     * complete=final.</p>
     * 
     * <p>The status or state of the result observation. The 
     * statusCode is not as fine-grained as lab reporting statuses 
     * such as preliminary. A &quot;preliminary&quot; result is a 
     * result whose statusCode=active and ProcessStep (procedure 
     * event) valued &quot;preliminary&quot;.</p>
     */
    public void setObservationEventStatusCode(ActStatus observationEventStatusCode) {
        this.observationEventStatusCode.setValue(observationEventStatusCode);
    }


    /**
     * <p>Business Name: Result Observation Date/Time</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>The date and time interval over which this lab test 
     * observation was performed.</p>
     */
    @Hl7XmlMapping({"observationEvent/effectiveTime"})
    public Interval<Date> getObservationEventEffectiveTime() {
        return this.observationEventEffectiveTime.getValue();
    }

    /**
     * <p>Business Name: Result Observation Date/Time</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>The date and time interval over which this lab test 
     * observation was performed.</p>
     */
    public void setObservationEventEffectiveTime(Interval<Date> observationEventEffectiveTime) {
        this.observationEventEffectiveTime.setValue(observationEventEffectiveTime);
    }


    /**
     * <p>Business Name: Result Masking Indicator</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.confidentialityCode</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-2)</p>
     * 
     * <p>This code allows for privacy control by patients as well 
     * as flagged for 'not for disclosure to patient' by care 
     * providers.</p>
     * 
     * <p>Any piece of information is potentially subject to 
     * 'masking', restricting it's availability from providers who 
     * have not been specifically authorized. Additionally, some 
     * clinical data requires the ability to mark as &quot;not for 
     * direct disclosure to patient&quot;. The values in this 
     * attribute enable the above masking to be represented and 
     * messaged.</p>
     */
    @Hl7XmlMapping({"observationEvent/confidentialityCode"})
    public Set<x_BasicConfidentialityKind> getObservationEventConfidentialityCode() {
        return this.observationEventConfidentialityCode.rawSet(x_BasicConfidentialityKind.class);
    }


    /**
     * <p>Business Name: Result Observation Value</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.value</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>The result value. If a coded value applies, the value 
     * must be selected from the LaboratoryResultCodeValue Concept 
     * Domain.</p>
     */
    @Hl7XmlMapping({"observationEvent/value"})
    public Object getObservationEventValue() {
        return this.observationEventValue.getValue();
    }

    /**
     * <p>Business Name: Result Observation Value</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.value</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>The result value. If a coded value applies, the value 
     * must be selected from the LaboratoryResultCodeValue Concept 
     * Domain.</p>
     */
    public void setObservationEventValue(Object observationEventValue) {
        this.observationEventValue.setValue(observationEventValue);
    }


    /**
     * <p>Business Name: Observation Interpretation Code</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.interpretationCode</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     * 
     * <p>In v2.x, this was the abnormal flag.</p>
     * 
     * <p>Communicates the performer's interpretation of the result 
     * based on some established baseline (normal, high, low, 
     * panic, etc.).</p>
     */
    @Hl7XmlMapping({"observationEvent/interpretationCode"})
    public ObservationInterpretation getObservationEventInterpretationCode() {
        return (ObservationInterpretation) this.observationEventInterpretationCode.getValue();
    }

    /**
     * <p>Business Name: Observation Interpretation Code</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.interpretationCode</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     * 
     * <p>In v2.x, this was the abnormal flag.</p>
     * 
     * <p>Communicates the performer's interpretation of the result 
     * based on some established baseline (normal, high, low, 
     * panic, etc.).</p>
     */
    public void setObservationEventInterpretationCode(ObservationInterpretation observationEventInterpretationCode) {
        this.observationEventInterpretationCode.setValue(observationEventInterpretationCode);
    }


    /**
     * <p>Business Name: Result Observation Method</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.methodCode</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>The code attribute is bound to LOINC. Some LOINC codes 
     * &quot;carry&quot; the method as part of the code. The 
     * methodCode attribute is provided for those cases where LOINC 
     * is not specific enough or the implementers want to break out 
     * this data in addition to it's inclusion in the LOINC 
     * code.</p>
     */
    @Hl7XmlMapping({"observationEvent/methodCode"})
    public ObservationMethod getObservationEventMethodCode() {
        return (ObservationMethod) this.observationEventMethodCode.getValue();
    }

    /**
     * <p>Business Name: Result Observation Method</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ObservationEvent.methodCode</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     * 
     * <p>The code attribute is bound to LOINC. Some LOINC codes 
     * &quot;carry&quot; the method as part of the code. The 
     * methodCode attribute is provided for those cases where LOINC 
     * is not specific enough or the implementers want to break out 
     * this data in addition to it's inclusion in the LOINC 
     * code.</p>
     */
    public void setObservationEventMethodCode(ObservationMethod observationEventMethodCode) {
        this.observationEventMethodCode.setValue(observationEventMethodCode);
    }


    /**
     * <p>Relationship: POLB_MT004000CA.ResultChoice.specimen</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-100)</p>
     */
    @Hl7XmlMapping({"observationEvent/specimen"})
    public List<ReportSectionSpecimenBean> getObservationEventSpecimen() {
        return this.observationEventSpecimen;
    }


    /**
     * <p>Relationship: POLB_MT004000CA.RecordTarget.patient</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/recordTarget/patient"})
    public Patient_1Bean getObservationEventRecordTargetPatient() {
        return this.observationEventRecordTargetPatient;
    }

    /**
     * <p>Relationship: POLB_MT004000CA.RecordTarget.patient</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventRecordTargetPatient(Patient_1Bean observationEventRecordTargetPatient) {
        this.observationEventRecordTargetPatient = observationEventRecordTargetPatient;
    }


    /**
     * <p>Relationship: POLB_MT004000CA.ResultChoice.receiver</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-20)</p>
     */
    @Hl7XmlMapping({"observationEvent/receiver"})
    public List<ElectronicResultReceiverBean> getObservationEventReceiver() {
        return this.observationEventReceiver;
    }


    /**
     * <p>Relationship: POLB_MT004000CA.Performer.roleChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/performer/roleChoice"})
    public RoleChoice getObservationEventPerformerRoleChoice() {
        return this.observationEventPerformerRoleChoice;
    }

    /**
     * <p>Relationship: POLB_MT004000CA.Performer.roleChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventPerformerRoleChoice(RoleChoice observationEventPerformerRoleChoice) {
        this.observationEventPerformerRoleChoice = observationEventPerformerRoleChoice;
    }

    public HealthcareOrganizationBean getObservationEventPerformerRoleChoiceAsAssignedEntity1() {
        return this.observationEventPerformerRoleChoice instanceof HealthcareOrganizationBean ? (HealthcareOrganizationBean) this.observationEventPerformerRoleChoice : null;
    }
    public boolean hasObservationEventPerformerRoleChoiceAsAssignedEntity1() {
        return (this.observationEventPerformerRoleChoice instanceof HealthcareOrganizationBean);
    }

    public AssignedEntityBean getObservationEventPerformerRoleChoiceAsAssignedEntity2() {
        return this.observationEventPerformerRoleChoice instanceof AssignedEntityBean ? (AssignedEntityBean) this.observationEventPerformerRoleChoice : null;
    }
    public boolean hasObservationEventPerformerRoleChoiceAsAssignedEntity2() {
        return (this.observationEventPerformerRoleChoice instanceof AssignedEntityBean);
    }

    public ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.coct_mt090508ca.HealthcareOrganizationBean getObservationEventPerformerRoleChoiceAsAssignedEntity3() {
        return this.observationEventPerformerRoleChoice instanceof ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.coct_mt090508ca.HealthcareOrganizationBean ? (ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.coct_mt090508ca.HealthcareOrganizationBean) this.observationEventPerformerRoleChoice : null;
    }
    public boolean hasObservationEventPerformerRoleChoiceAsAssignedEntity3() {
        return (this.observationEventPerformerRoleChoice instanceof ca.infoway.messagebuilder.model.pcs_mr2009_r02_04_03.common.coct_mt090508ca.HealthcareOrganizationBean);
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.ResultChoice.primaryInformationRecipient</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     */
    @Hl7XmlMapping({"observationEvent/primaryInformationRecipient"})
    public PrimaryInformationRecipientBean getObservationEventPrimaryInformationRecipient() {
        return this.observationEventPrimaryInformationRecipient;
    }

    /**
     * <p>Relationship: 
     * POLB_MT004000CA.ResultChoice.primaryInformationRecipient</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-1)</p>
     */
    public void setObservationEventPrimaryInformationRecipient(PrimaryInformationRecipientBean observationEventPrimaryInformationRecipient) {
        this.observationEventPrimaryInformationRecipient = observationEventPrimaryInformationRecipient;
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.InFulfillmentOf.fulfillmentChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/inFulfillmentOf/fulfillmentChoice"})
    public FulfillmentChoice getObservationEventInFulfillmentOfFulfillmentChoice() {
        return this.observationEventInFulfillmentOfFulfillmentChoice;
    }

    /**
     * <p>Relationship: 
     * POLB_MT004000CA.InFulfillmentOf.fulfillmentChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventInFulfillmentOfFulfillmentChoice(FulfillmentChoice observationEventInFulfillmentOfFulfillmentChoice) {
        this.observationEventInFulfillmentOfFulfillmentChoice = observationEventInFulfillmentOfFulfillmentChoice;
    }

    public FillerOrderBean getObservationEventInFulfillmentOfFulfillmentChoiceAsActPromise1() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof FillerOrderBean ? (FillerOrderBean) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsActPromise1() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof FillerOrderBean);
    }

    public PlacerGroupBean getObservationEventInFulfillmentOfFulfillmentChoiceAsPlacerGroup() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof PlacerGroupBean ? (PlacerGroupBean) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsPlacerGroup() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof PlacerGroupBean);
    }

    public BatteryOrPanelBean getObservationEventInFulfillmentOfFulfillmentChoiceAsBatteryRequest() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof BatteryOrPanelBean ? (BatteryOrPanelBean) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsBatteryRequest() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof BatteryOrPanelBean);
    }

    public ObservationRequestBean getObservationEventInFulfillmentOfFulfillmentChoiceAsObservationRequest() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof ObservationRequestBean ? (ObservationRequestBean) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsObservationRequest() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof ObservationRequestBean);
    }

    public RequestChoice getObservationEventInFulfillmentOfFulfillmentChoiceAsRequestChoice() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof RequestChoice ? (RequestChoice) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsRequestChoice() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof RequestChoice);
    }

    public ActRequestBean getObservationEventInFulfillmentOfFulfillmentChoiceAsActRequest() {
        return this.observationEventInFulfillmentOfFulfillmentChoice instanceof ActRequestBean ? (ActRequestBean) this.observationEventInFulfillmentOfFulfillmentChoice : null;
    }
    public boolean hasObservationEventInFulfillmentOfFulfillmentChoiceAsActRequest() {
        return (this.observationEventInFulfillmentOfFulfillmentChoice instanceof ActRequestBean);
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.ObservationEvent.derivedFrom</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-10)</p>
     */
    @Hl7XmlMapping({"observationEvent/derivedFrom"})
    public List<DerivationBean> getObservationEventDerivedFrom() {
        return this.observationEventDerivedFrom;
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.ReferenceRange.interpretationRange</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/referenceRange/interpretationRange"})
    public ReferenceRangeBean getObservationEventReferenceRangeInterpretationRange() {
        return this.observationEventReferenceRangeInterpretationRange;
    }

    /**
     * <p>Relationship: 
     * POLB_MT004000CA.ReferenceRange.interpretationRange</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventReferenceRangeInterpretationRange(ReferenceRangeBean observationEventReferenceRangeInterpretationRange) {
        this.observationEventReferenceRangeInterpretationRange = observationEventReferenceRangeInterpretationRange;
    }


    /**
     * <p>Business Name: Outbreak Identifier</p>
     * 
     * <p>Relationship: POLB_MT004000CA.OutbreakEvent.id</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Used as an indicator to public health that this lab 
     * result may indicate the subject is a part of an outbreak. 
     * This does not confirm that lab result is an outbreak 
     * subject, only that the potential exists and public health 
     * should disposition.</p>
     * 
     * <p>Identifies an outbreak which the reporting lab suspects 
     * this result might be a part of.</p>
     */
    @Hl7XmlMapping({"observationEvent/pertinentInformation1/outbreakEvent/id"})
    public Identifier getObservationEventPertinentInformation1OutbreakEventId() {
        return this.observationEventPertinentInformation1OutbreakEventId.getValue();
    }

    /**
     * <p>Business Name: Outbreak Identifier</p>
     * 
     * <p>Relationship: POLB_MT004000CA.OutbreakEvent.id</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Used as an indicator to public health that this lab 
     * result may indicate the subject is a part of an outbreak. 
     * This does not confirm that lab result is an outbreak 
     * subject, only that the potential exists and public health 
     * should disposition.</p>
     * 
     * <p>Identifies an outbreak which the reporting lab suspects 
     * this result might be a part of.</p>
     */
    public void setObservationEventPertinentInformation1OutbreakEventId(Identifier observationEventPertinentInformation1OutbreakEventId) {
        this.observationEventPertinentInformation1OutbreakEventId.setValue(observationEventPertinentInformation1OutbreakEventId);
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.PertinentInformation2.supportingClinicalObservationEvent</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/pertinentInformation2/supportingClinicalObservationEvent"})
    public SupportingClinicalInformationBean getObservationEventPertinentInformation2SupportingClinicalObservationEvent() {
        return this.observationEventPertinentInformation2SupportingClinicalObservationEvent;
    }

    /**
     * <p>Relationship: 
     * POLB_MT004000CA.PertinentInformation2.supportingClinicalObservationEvent</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventPertinentInformation2SupportingClinicalObservationEvent(SupportingClinicalInformationBean observationEventPertinentInformation2SupportingClinicalObservationEvent) {
        this.observationEventPertinentInformation2SupportingClinicalObservationEvent = observationEventPertinentInformation2SupportingClinicalObservationEvent;
    }


    /**
     * <p>Business Name: Sort Key Text</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ResultSortKey.text</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Attribute for communicating the actual sort key 
     * value.</p>
     * 
     * <p>Value used for sorting results.</p>
     */
    @Hl7XmlMapping({"observationEvent/component1/resultSortKey/text"})
    public String getObservationEventComponent1ResultSortKeyText() {
        return this.observationEventComponent1ResultSortKeyText.getValue();
    }

    /**
     * <p>Business Name: Sort Key Text</p>
     * 
     * <p>Relationship: POLB_MT004000CA.ResultSortKey.text</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Attribute for communicating the actual sort key 
     * value.</p>
     * 
     * <p>Value used for sorting results.</p>
     */
    public void setObservationEventComponent1ResultSortKeyText(String observationEventComponent1ResultSortKeyText) {
        this.observationEventComponent1ResultSortKeyText.setValue(observationEventComponent1ResultSortKeyText);
    }


    /**
     * <p>Relationship: 
     * POLB_MT004000CA.Component3.reportableTestIndicator</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/component2/reportableTestIndicator"})
    public ReportableHealthIndicatorBean getObservationEventComponent2ReportableTestIndicator() {
        return this.observationEventComponent2ReportableTestIndicator;
    }

    /**
     * <p>Relationship: 
     * POLB_MT004000CA.Component3.reportableTestIndicator</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventComponent2ReportableTestIndicator(ReportableHealthIndicatorBean observationEventComponent2ReportableTestIndicator) {
        this.observationEventComponent2ReportableTestIndicator = observationEventComponent2ReportableTestIndicator;
    }


    /**
     * <p>Relationship: POLB_MT004000CA.Component1.resultChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/component3/resultChoice"})
    public ResultChoice getObservationEventComponent3ResultChoice() {
        return this.observationEventComponent3ResultChoice;
    }

    /**
     * <p>Relationship: POLB_MT004000CA.Component1.resultChoice</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventComponent3ResultChoice(ResultChoice observationEventComponent3ResultChoice) {
        this.observationEventComponent3ResultChoice = observationEventComponent3ResultChoice;
    }

    public ObservationReportBean getObservationEventComponent3ResultChoiceAsObservationReport() {
        return this.observationEventComponent3ResultChoice instanceof ObservationReportBean ? (ObservationReportBean) this.observationEventComponent3ResultChoice : null;
    }
    public boolean hasObservationEventComponent3ResultChoiceAsObservationReport() {
        return (this.observationEventComponent3ResultChoice instanceof ObservationReportBean);
    }

    public BatteryEventBean getObservationEventComponent3ResultChoiceAsBatteryEvent() {
        return this.observationEventComponent3ResultChoice instanceof BatteryEventBean ? (BatteryEventBean) this.observationEventComponent3ResultChoice : null;
    }
    public boolean hasObservationEventComponent3ResultChoiceAsBatteryEvent() {
        return (this.observationEventComponent3ResultChoice instanceof BatteryEventBean);
    }

    public ResultObservationBean getObservationEventComponent3ResultChoiceAsObservationEvent() {
        return this.observationEventComponent3ResultChoice instanceof ResultObservationBean ? (ResultObservationBean) this.observationEventComponent3ResultChoice : null;
    }
    public boolean hasObservationEventComponent3ResultChoiceAsObservationEvent() {
        return (this.observationEventComponent3ResultChoice instanceof ResultObservationBean);
    }


    /**
     * <p>Relationship: POLB_MT004000CA.Subject1.controlActEvent</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    @Hl7XmlMapping({"observationEvent/subjectOf1/controlActEvent"})
    public VersionInformationBean getObservationEventSubjectOf1ControlActEvent() {
        return this.observationEventSubjectOf1ControlActEvent;
    }

    /**
     * <p>Relationship: POLB_MT004000CA.Subject1.controlActEvent</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (1)</p>
     */
    public void setObservationEventSubjectOf1ControlActEvent(VersionInformationBean observationEventSubjectOf1ControlActEvent) {
        this.observationEventSubjectOf1ControlActEvent = observationEventSubjectOf1ControlActEvent;
    }


    /**
     * <p>Relationship: POLB_MT004000CA.ResultChoice.subjectOf2</p>
     * 
     * <p>Conformance/Cardinality: REQUIRED (0-100)</p>
     */
    @Hl7XmlMapping({"observationEvent/subjectOf2"})
    public List<IncludesBean> getObservationEventSubjectOf2() {
        return this.observationEventSubjectOf2;
    }


    /**
     * <p>Business Name: Result Status Process Step Code</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ResultStatusProcessStep.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Used to designate &quot;preliminary&quot; and 
     * &quot;final&quot; result statuses.</p>
     */
    @Hl7XmlMapping({"observationEvent/subjectOf3/resultStatusProcessStep/code"})
    public LabResultReportingProcessStepCode getObservationEventSubjectOf3ResultStatusProcessStepCode() {
        return (LabResultReportingProcessStepCode) this.observationEventSubjectOf3ResultStatusProcessStepCode.getValue();
    }

    /**
     * <p>Business Name: Result Status Process Step Code</p>
     * 
     * <p>Relationship: 
     * POLB_MT004000CA.ResultStatusProcessStep.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     * 
     * <p>Used to designate &quot;preliminary&quot; and 
     * &quot;final&quot; result statuses.</p>
     */
    public void setObservationEventSubjectOf3ResultStatusProcessStepCode(LabResultReportingProcessStepCode observationEventSubjectOf3ResultStatusProcessStepCode) {
        this.observationEventSubjectOf3ResultStatusProcessStepCode.setValue(observationEventSubjectOf3ResultStatusProcessStepCode);
    }

}
