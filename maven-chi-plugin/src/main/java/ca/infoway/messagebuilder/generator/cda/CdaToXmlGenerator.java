/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: jroberts $
 * Last modified: $LastChangedDate: 2014-07-10 12:26:14 -0400 (Thu, 10 Jul 2014) $
 * Revision:      $LastChangedRevision: 8803 $
 */

package ca.infoway.messagebuilder.generator.cda;

import static ca.infoway.messagebuilder.generator.LogLevel.INFO;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.convert.AnnotationStrategy;
import org.simpleframework.xml.core.Persister;

import ca.infoway.messagebuilder.GeneratorException;
import ca.infoway.messagebuilder.generator.FileSet;
import ca.infoway.messagebuilder.generator.MessageSetGenerator;
import ca.infoway.messagebuilder.generator.MessageSetWriter;
import ca.infoway.messagebuilder.generator.MifSource;
import ca.infoway.messagebuilder.generator.OutputUI;
import ca.infoway.messagebuilder.generator.template.CdaTemplateProcessor;
import ca.infoway.messagebuilder.generator.template.TemplateExport;
import ca.infoway.messagebuilder.generator.template.ValueSetDefinition;
import ca.infoway.messagebuilder.j5goodies.ManifestReader;
import ca.infoway.messagebuilder.maven.util.OutputUIImpl;
import ca.infoway.messagebuilder.tools.template.TemplateApplier;
import ca.infoway.messagebuilder.xml.MessageSet;
import ca.infoway.messagebuilder.xml.template.TemplateSet;

public class CdaToXmlGenerator implements MessageSetGenerator {

	private final OutputUI outputUI;
	private MessageSet messageSet = new MessageSet();
	private static Serializer serializer = new Persister(new AnnotationStrategy());
	private MessageSetWriter messageSetWriter;
	
	public CdaToXmlGenerator(OutputUIImpl outputUI, boolean useR2Datatypes) {
		this.outputUI = outputUI;
		
		this.messageSet.setCda(true);
		this.messageSet.setGeneratedAsR2(useR2Datatypes);
		this.messageSet.setDescriptiveName("Message set generated by Message Builder: " + new Date());

		String projectVersion;
		try {
			Manifest manifest = ManifestReader.read(getClass());
			Attributes attributes = manifest.getMainAttributes();
			projectVersion = attributes.getValue("Implementation-Version");
		} catch(IOException e) {
			projectVersion = "unknown version";
		}
		this.messageSet.setGeneratedBy(projectVersion);
		
		this.messageSetWriter = new MessageSetWriter(this.messageSet, this.outputUI);
	}

	@Override
	public MessageSet processAllCdaFiles(File schemaFile, File supplementarySchemaFile, File templateFile, File vocabularyFile) throws GeneratorException, IOException {
		try {
			this.outputUI.log(INFO, "Parsing input files.");
			Schema schema = (Schema) serializer.read(Schema.class, schemaFile);
		
			Schema supplementalSchema = null;
			if (supplementarySchemaFile != null) {
				supplementalSchema = (Schema) serializer.read(Schema.class, supplementarySchemaFile);
			}
			
			TemplateExport templateExport = (TemplateExport) serializer.read(TemplateExport.class, templateFile);
			ValueSetDefinition valueSetDefinition = (ValueSetDefinition) serializer.read(ValueSetDefinition.class, vocabularyFile);
			
			this.outputUI.log(INFO, "Generating base model.");
			new CdaXsdProcessor(outputUI).processSchema(schema, supplementalSchema, messageSet);
			
			this.outputUI.log(INFO, "Generating delta set from template definition.");
			TemplateSet templateSet = new TemplateSet();
			new CdaTemplateProcessor(valueSetDefinition, this.outputUI).parseTemplate(templateExport, messageSet, templateSet);
			
			this.outputUI.log(INFO, "Applying templates to generate constrained model.");
			TemplateApplier applier = new TemplateApplier();
			this.messageSet = applier.resolveToMessageSet(messageSet, templateSet, "");
		} catch (Exception e) {
			throw new GeneratorException(e);
		}

		this.messageSetWriter = new MessageSetWriter(this.messageSet, this.outputUI);
		
		return this.messageSet;
	}

	@Override
	public void writeToMessageSet(File outputFile) throws GeneratorException, IOException {
		this.messageSetWriter.writeToMessageSet(outputFile);
	}

	@Override
	public MessageSet processAllMifs(MifSource mifSource)
			throws GeneratorException, IOException {
		throw new UnsupportedOperationException("Must use processAllCdaFiles() method instead.");
	}

	@Override
	public void processAllMessageSets(List<FileSet> inputMessageSets)
			throws GeneratorException, IOException {
		throw new UnsupportedOperationException("Must use processAllCdaFiles() method instead.");
	}

}
