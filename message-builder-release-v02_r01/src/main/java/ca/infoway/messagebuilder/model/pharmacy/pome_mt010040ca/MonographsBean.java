/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.pharmacy.pome_mt010040ca;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.ED;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.EDImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.EncapsulatedData;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActMedicationDocumentCode;
import ca.infoway.messagebuilder.domainvalue.HumanLanguage;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.merged.AssignedEntityBean;
import java.util.Date;



/**
 * <p>Monographs</p>
 * 
 * <p>Information on the composition and use of a drug.</p>
 * 
 * <p>Guides providers for specifying optimum use of drugs by 
 * patients. May also guide patients in appropriately using 
 * their medication.</p>
 */
@Hl7PartTypeMapping({"POME_MT010040CA.Document"})
public class MonographsBean extends MessagePartBean {

    private static final long serialVersionUID = 20100615L;
    private II monographId = new IIImpl();
    private CV monographType = new CVImpl();
    private ED<EncapsulatedData> monographContent = new EDImpl<EncapsulatedData>();
    private IVL<TS, Interval<Date>> monographEffectiveExpiryDate = new IVLImpl<TS, Interval<Date>>();
    private CV writtenIn = new CVImpl();
    private AssignedEntityBean authorAssignedEntity;

    @Hl7XmlMapping({"id"})
    public Identifier getMonographId() {
        return this.monographId.getValue();
    }
    public void setMonographId(Identifier monographId) {
        this.monographId.setValue(monographId);
    }

    @Hl7XmlMapping({"code"})
    public ActMedicationDocumentCode getMonographType() {
        return (ActMedicationDocumentCode) this.monographType.getValue();
    }
    public void setMonographType(ActMedicationDocumentCode monographType) {
        this.monographType.setValue(monographType);
    }

    @Hl7XmlMapping({"text"})
    public EncapsulatedData getMonographContent() {
        return this.monographContent.getValue();
    }
    public void setMonographContent(EncapsulatedData monographContent) {
        this.monographContent.setValue(monographContent);
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getMonographEffectiveExpiryDate() {
        return this.monographEffectiveExpiryDate.getValue();
    }
    public void setMonographEffectiveExpiryDate(Interval<Date> monographEffectiveExpiryDate) {
        this.monographEffectiveExpiryDate.setValue(monographEffectiveExpiryDate);
    }

    @Hl7XmlMapping({"languageCode"})
    public HumanLanguage getWrittenIn() {
        return (HumanLanguage) this.writtenIn.getValue();
    }
    public void setWrittenIn(HumanLanguage writtenIn) {
        this.writtenIn.setValue(writtenIn);
    }

    @Hl7XmlMapping({"author/assignedEntity"})
    public AssignedEntityBean getAuthorAssignedEntity() {
        return this.authorAssignedEntity;
    }
    public void setAuthorAssignedEntity(AssignedEntityBean authorAssignedEntity) {
        this.authorAssignedEntity = authorAssignedEntity;
    }

}
