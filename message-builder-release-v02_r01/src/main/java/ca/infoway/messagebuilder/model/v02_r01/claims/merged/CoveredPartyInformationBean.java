/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.v02_r01.claims.merged;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.v02_r01.claims.ficr_mt600201ca.AnimalPatientBean;
import ca.infoway.messagebuilder.model.v02_r01.claims.ficr_mt600201ca.CoveredPartyAsPatientChoice;
import ca.infoway.messagebuilder.model.v02_r01.claims.ficr_mt600201ca.PatientConsentBean;
import ca.infoway.messagebuilder.model.v02_r01.claims.ficr_mt600201ca.PersonPatientBean;
import ca.infoway.messagebuilder.model.v02_r01.merged.RelatedPersonBean;
import java.util.ArrayList;
import java.util.List;



@Hl7PartTypeMapping({"FICR_MT600201CA.CoveredPartyAsPatient","FICR_MT610201CA.CoveredPartyAsPatient"})
public class CoveredPartyInformationBean extends MessagePartBean {

    private static final long serialVersionUID = 20110318L;
    private II coveredPartyIdentifier = new IIImpl();
    private RelatedPersonBean indirectAuthorityPersonalRelationship;
    private CV code = new CVImpl();
    private List<PatientConsentBean> subjectOf = new ArrayList<PatientConsentBean>();
    private CoveredPartyAsPatientChoice coveredPartyAsPatientChoice;


    /**
     * <p>CoveredPartyIdentifier</p>
     * 
     * <p>Covered Party Identifier</p>
     */
    @Hl7XmlMapping({"id"})
    public Identifier getCoveredPartyIdentifier() {
        return this.coveredPartyIdentifier.getValue();
    }
    public void setCoveredPartyIdentifier(Identifier coveredPartyIdentifier) {
        this.coveredPartyIdentifier.setValue(coveredPartyIdentifier);
    }


    @Hl7XmlMapping({"indirectAuthority/personalRelationship"})
    public RelatedPersonBean getIndirectAuthorityPersonalRelationship() {
        return this.indirectAuthorityPersonalRelationship;
    }
    public void setIndirectAuthorityPersonalRelationship(RelatedPersonBean indirectAuthorityPersonalRelationship) {
        this.indirectAuthorityPersonalRelationship = indirectAuthorityPersonalRelationship;
    }


    /**
     * <p>Relationship to Policy Holder</p>
     * 
     */
    @Hl7XmlMapping({"code"})
    public Code getCode() {
        return (Code) this.code.getValue();
    }
    public void setCode(Code code) {
        this.code.setValue(code);
    }


    @Hl7XmlMapping({"subjectOf"})
    public List<PatientConsentBean> getSubjectOf() {
        return this.subjectOf;
    }


    @Hl7XmlMapping({"coveredPartyAsPatientChoice"})
    public CoveredPartyAsPatientChoice getCoveredPartyAsPatientChoice() {
        return this.coveredPartyAsPatientChoice;
    }
    public void setCoveredPartyAsPatientChoice(CoveredPartyAsPatientChoice coveredPartyAsPatientChoice) {
        this.coveredPartyAsPatientChoice = coveredPartyAsPatientChoice;
    }

    public PersonPatientBean getCoveredPartyAsPatientChoiceAsCoveredPartyAsPatientPerson() {
        return this.coveredPartyAsPatientChoice instanceof PersonPatientBean ? (PersonPatientBean) this.coveredPartyAsPatientChoice : null;
    }
    public boolean hasCoveredPartyAsPatientChoiceAsCoveredPartyAsPatientPerson() {
        return (this.coveredPartyAsPatientChoice instanceof PersonPatientBean);
    }

    public AnimalPatientBean getCoveredPartyAsPatientChoiceAsCoveredPartyAsPatientAnimal() {
        return this.coveredPartyAsPatientChoice instanceof AnimalPatientBean ? (AnimalPatientBean) this.coveredPartyAsPatientChoice : null;
    }
    public boolean hasCoveredPartyAsPatientChoiceAsCoveredPartyAsPatientAnimal() {
        return (this.coveredPartyAsPatientChoice instanceof AnimalPatientBean);
    }

}
