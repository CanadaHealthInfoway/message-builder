/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 15:47:15 -0400 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.ccda_r00_alpha.diagnosticimagingreport;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CE_R2;
import ca.infoway.messagebuilder.datatype.CS_R2;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.LIST;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CE_R2Impl;
import ca.infoway.messagebuilder.datatype.impl.CS_R2Impl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.LISTImpl;
import ca.infoway.messagebuilder.datatype.lang.CodedTypeR2;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActMood;
import ca.infoway.messagebuilder.domainvalue.ActRelationshipType;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.physicianreadingstudyperformer.Performer1Bean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



@Hl7PartTypeMapping({"DiagnosticImagingReport.DocumentationOf"})
public class DocumentationOfBean extends MessagePartBean {

    private static final long serialVersionUID = 20140915L;
    private CS_R2 typeCode = new CS_R2Impl();
    private LIST<CS_R2, CodedTypeR2<? extends Code>> realmCode = new LISTImpl<CS_R2, CodedTypeR2<? extends Code>>(CS_R2Impl.class);
    private II typeId = new IIImpl();
    private LIST<II, Identifier> templateId = new LISTImpl<II, Identifier>(IIImpl.class);
    private CS_R2 serviceEventMoodCode = new CS_R2Impl();
    private LIST<CS_R2, CodedTypeR2<? extends Code>> serviceEventRealmCode = new LISTImpl<CS_R2, CodedTypeR2<? extends Code>>(CS_R2Impl.class);
    private II serviceEventTypeId = new IIImpl();
    private LIST<II, Identifier> serviceEventTemplateId = new LISTImpl<II, Identifier>(IIImpl.class);
    private LIST<II, Identifier> serviceEventId = new LISTImpl<II, Identifier>(IIImpl.class);
    private CE_R2 serviceEventCode = new CE_R2Impl();
    private IVL<TS, Interval<Date>> serviceEventEffectiveTime = new IVLImpl<TS, Interval<Date>>();
    private List<Performer1Bean> serviceEventPerformer = new ArrayList<Performer1Bean>();


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.typeCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"typeCode"})
    public CodedTypeR2<ActRelationshipType> getTypeCode() {
        return (CodedTypeR2<ActRelationshipType>) this.typeCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.typeCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setTypeCode(CodedTypeR2<ActRelationshipType> typeCode) {
        this.typeCode.setValue(typeCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.realmCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"realmCode"})
    public List<CodedTypeR2<Code>> getRealmCode() {
        return this.realmCode.rawList(CodedTypeR2.class);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.typeId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"typeId"})
    public Identifier getTypeId() {
        return this.typeId.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.typeId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setTypeId(Identifier typeId) {
        this.typeId.setValue(typeId);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.DocumentationOf.templateId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"templateId"})
    public List<Identifier> getTemplateId() {
        return this.templateId.rawList();
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"serviceEvent/moodCode"})
    public CodedTypeR2<ActMood> getServiceEventMoodCode() {
        return (CodedTypeR2<ActMood>) this.serviceEventMoodCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setServiceEventMoodCode(CodedTypeR2<ActMood> serviceEventMoodCode) {
        this.serviceEventMoodCode.setValue(serviceEventMoodCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.realmCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"serviceEvent/realmCode"})
    public List<CodedTypeR2<Code>> getServiceEventRealmCode() {
        return this.serviceEventRealmCode.rawList(CodedTypeR2.class);
    }


    /**
     * <p>Relationship: DiagnosticImagingReport.ServiceEvent.typeId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"serviceEvent/typeId"})
    public Identifier getServiceEventTypeId() {
        return this.serviceEventTypeId.getValue();
    }

    /**
     * <p>Relationship: DiagnosticImagingReport.ServiceEvent.typeId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setServiceEventTypeId(Identifier serviceEventTypeId) {
        this.serviceEventTypeId.setValue(serviceEventTypeId);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.templateId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"serviceEvent/templateId"})
    public List<Identifier> getServiceEventTemplateId() {
        return this.serviceEventTemplateId.rawList();
    }


    /**
     * <p>Relationship: DiagnosticImagingReport.ServiceEvent.id</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"serviceEvent/id"})
    public List<Identifier> getServiceEventId() {
        return this.serviceEventId.rawList();
    }


    /**
     * <p>Relationship: DiagnosticImagingReport.ServiceEvent.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"serviceEvent/code"})
    public CodedTypeR2<Code> getServiceEventCode() {
        return (CodedTypeR2<Code>) this.serviceEventCode.getValue();
    }

    /**
     * <p>Relationship: DiagnosticImagingReport.ServiceEvent.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setServiceEventCode(CodedTypeR2<Code> serviceEventCode) {
        this.serviceEventCode.setValue(serviceEventCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"serviceEvent/effectiveTime"})
    public Interval<Date> getServiceEventEffectiveTime() {
        return this.serviceEventEffectiveTime.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setServiceEventEffectiveTime(Interval<Date> serviceEventEffectiveTime) {
        this.serviceEventEffectiveTime.setValue(serviceEventEffectiveTime);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ServiceEvent.performer</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"serviceEvent/performer"})
    public List<Performer1Bean> getServiceEventPerformer() {
        return this.serviceEventPerformer;
    }

}
