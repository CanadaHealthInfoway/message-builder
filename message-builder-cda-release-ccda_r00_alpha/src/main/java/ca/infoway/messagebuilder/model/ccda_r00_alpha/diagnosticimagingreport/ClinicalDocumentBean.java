/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 15:47:15 -0400 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.ccda_r00_alpha.diagnosticimagingreport;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CE_R2;
import ca.infoway.messagebuilder.datatype.CS_R2;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.INT;
import ca.infoway.messagebuilder.datatype.ST;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CE_R2Impl;
import ca.infoway.messagebuilder.datatype.impl.CS_R2Impl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.INTImpl;
import ca.infoway.messagebuilder.datatype.impl.STImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.CodedTypeR2;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.domainvalue.ActMood;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.domainvalue.ActClinicalDocument;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.domainvalue.DIRDocumentTypeCodes;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.domainvalue.HL7BasicConfidentialityKind;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.domainvalue.Language;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.AuthenticatorBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.Author_2Bean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.AuthorizationBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.CustodianBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.DataEntererBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.InFulfillmentOfBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.InformationRecipientBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.LegalAuthenticatorBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.Participant1Bean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.RecordTargetBean;
import ca.infoway.messagebuilder.model.ccda_r00_alpha.merged.RelatedDocumentBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



@Hl7PartTypeMapping({"DiagnosticImagingReport.ClinicalDocument"})
@Hl7RootType
public class ClinicalDocumentBean extends MessagePartBean {

    private static final long serialVersionUID = 20140915L;
    private CS_R2 classCode = new CS_R2Impl();
    private CS_R2 moodCode = new CS_R2Impl();
    private II typeId = new IIImpl();
    private II templateId = new IIImpl();
    private II id = new IIImpl();
    private CE_R2 code = new CE_R2Impl();
    private ST title = new STImpl();
    private TS effectiveTime = new TSImpl();
    private CE_R2 confidentialityCode = new CE_R2Impl();
    private CS_R2 languageCode = new CS_R2Impl();
    private II setId = new IIImpl();
    private INT versionNumber = new INTImpl();
    private TS copyTime = new TSImpl();
    private List<RecordTargetBean> recordTarget = new ArrayList<RecordTargetBean>();
    private List<Author_2Bean> author = new ArrayList<Author_2Bean>();
    private DataEntererBean dataEnterer;
    private CustodianBean custodian;
    private List<InformationRecipientBean> informationRecipient = new ArrayList<InformationRecipientBean>();
    private LegalAuthenticatorBean legalAuthenticator;
    private List<AuthenticatorBean> authenticator = new ArrayList<AuthenticatorBean>();
    private Participant1Bean participant;
    private List<InFulfillmentOfBean> inFulfillmentOf = new ArrayList<InFulfillmentOfBean>();
    private DocumentationOfBean documentationOf;
    private RelatedDocumentBean relatedDocument;
    private List<AuthorizationBean> authorization = new ArrayList<AuthorizationBean>();
    private Component1Bean componentOf;
    private Component2Bean component;


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.classCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"classCode"})
    public CodedTypeR2<ActClinicalDocument> getClassCode() {
        return (CodedTypeR2<ActClinicalDocument>) this.classCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.classCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setClassCode(CodedTypeR2<ActClinicalDocument> classCode) {
        this.classCode.setValue(classCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"moodCode"})
    public CodedTypeR2<ActMood> getMoodCode() {
        return (CodedTypeR2<ActMood>) this.moodCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.moodCode</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setMoodCode(CodedTypeR2<ActMood> moodCode) {
        this.moodCode.setValue(moodCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.typeId</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"typeId"})
    public Identifier getTypeId() {
        return this.typeId.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.typeId</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setTypeId(Identifier typeId) {
        this.typeId.setValue(typeId);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.templateId</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"templateId"})
    public Identifier getTemplateId() {
        return this.templateId.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.templateId</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setTemplateId(Identifier templateId) {
        this.templateId.setValue(templateId);
    }


    /**
     * <p>Relationship: DiagnosticImagingReport.ClinicalDocument.id</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"id"})
    public Identifier getId() {
        return this.id.getValue();
    }

    /**
     * <p>Relationship: DiagnosticImagingReport.ClinicalDocument.id</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setId(Identifier id) {
        this.id.setValue(id);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"code"})
    public CodedTypeR2<DIRDocumentTypeCodes> getCode() {
        return (CodedTypeR2<DIRDocumentTypeCodes>) this.code.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.code</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setCode(CodedTypeR2<DIRDocumentTypeCodes> code) {
        this.code.setValue(code);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.title</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"title"})
    public String getTitle() {
        return this.title.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.title</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setTitle(String title) {
        this.title.setValue(title);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"effectiveTime"})
    public Date getEffectiveTime() {
        return this.effectiveTime.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.effectiveTime</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setEffectiveTime(Date effectiveTime) {
        this.effectiveTime.setValue(effectiveTime);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.confidentialityCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"confidentialityCode"})
    public CodedTypeR2<HL7BasicConfidentialityKind> getConfidentialityCode() {
        return (CodedTypeR2<HL7BasicConfidentialityKind>) this.confidentialityCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.confidentialityCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setConfidentialityCode(CodedTypeR2<HL7BasicConfidentialityKind> confidentialityCode) {
        this.confidentialityCode.setValue(confidentialityCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.languageCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"languageCode"})
    public CodedTypeR2<Language> getLanguageCode() {
        return (CodedTypeR2<Language>) this.languageCode.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.languageCode</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setLanguageCode(CodedTypeR2<Language> languageCode) {
        this.languageCode.setValue(languageCode);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.setId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"setId"})
    public Identifier getSetId() {
        return this.setId.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.setId</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setSetId(Identifier setId) {
        this.setId.setValue(setId);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.versionNumber</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"versionNumber"})
    public Integer getVersionNumber() {
        return this.versionNumber.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.versionNumber</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setVersionNumber(Integer versionNumber) {
        this.versionNumber.setValue(versionNumber);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.copyTime</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"copyTime"})
    public Date getCopyTime() {
        return this.copyTime.getValue();
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.copyTime</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setCopyTime(Date copyTime) {
        this.copyTime.setValue(copyTime);
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.recordTarget</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (*)</p>
     */
    @Hl7XmlMapping({"recordTarget"})
    public List<RecordTargetBean> getRecordTarget() {
        return this.recordTarget;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.author</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (*)</p>
     */
    @Hl7XmlMapping({"author"})
    public List<Author_2Bean> getAuthor() {
        return this.author;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.dataEnterer</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"dataEnterer"})
    public DataEntererBean getDataEnterer() {
        return this.dataEnterer;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.dataEnterer</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setDataEnterer(DataEntererBean dataEnterer) {
        this.dataEnterer = dataEnterer;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.custodian</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"custodian"})
    public CustodianBean getCustodian() {
        return this.custodian;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.custodian</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setCustodian(CustodianBean custodian) {
        this.custodian = custodian;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.informationRecipient</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"informationRecipient"})
    public List<InformationRecipientBean> getInformationRecipient() {
        return this.informationRecipient;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.legalAuthenticator</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"legalAuthenticator"})
    public LegalAuthenticatorBean getLegalAuthenticator() {
        return this.legalAuthenticator;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.legalAuthenticator</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setLegalAuthenticator(LegalAuthenticatorBean legalAuthenticator) {
        this.legalAuthenticator = legalAuthenticator;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.authenticator</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"authenticator"})
    public List<AuthenticatorBean> getAuthenticator() {
        return this.authenticator;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.participant</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"participant"})
    public Participant1Bean getParticipant() {
        return this.participant;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.participant</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setParticipant(Participant1Bean participant) {
        this.participant = participant;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.inFulfillmentOf</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"inFulfillmentOf"})
    public List<InFulfillmentOfBean> getInFulfillmentOf() {
        return this.inFulfillmentOf;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.documentationOf</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"documentationOf"})
    public DocumentationOfBean getDocumentationOf() {
        return this.documentationOf;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.documentationOf</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setDocumentationOf(DocumentationOfBean documentationOf) {
        this.documentationOf = documentationOf;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.relatedDocument</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"relatedDocument"})
    public RelatedDocumentBean getRelatedDocument() {
        return this.relatedDocument;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.relatedDocument</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setRelatedDocument(RelatedDocumentBean relatedDocument) {
        this.relatedDocument = relatedDocument;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.authorization</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-*)</p>
     */
    @Hl7XmlMapping({"authorization"})
    public List<AuthorizationBean> getAuthorization() {
        return this.authorization;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.componentOf</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    @Hl7XmlMapping({"componentOf"})
    public Component1Bean getComponentOf() {
        return this.componentOf;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.componentOf</p>
     * 
     * <p>Conformance/Cardinality: OPTIONAL (0-1)</p>
     */
    public void setComponentOf(Component1Bean componentOf) {
        this.componentOf = componentOf;
    }


    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.component</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    @Hl7XmlMapping({"component"})
    public Component2Bean getComponent() {
        return this.component;
    }

    /**
     * <p>Relationship: 
     * DiagnosticImagingReport.ClinicalDocument.component</p>
     * 
     * <p>Conformance/Cardinality: MANDATORY (1)</p>
     */
    public void setComponent(Component2Bean component) {
        this.component = component;
    }

}
