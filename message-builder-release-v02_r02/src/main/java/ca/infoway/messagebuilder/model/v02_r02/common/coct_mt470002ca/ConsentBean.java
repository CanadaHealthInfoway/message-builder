/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.v02_r02.common.coct_mt470002ca;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.II;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.IIImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Identifier;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.domainvalue.ActConsentInformationAccessReason;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.v02_r02.common.coct_mt050202ca.PatientBean;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.AccessTypeBean;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.ActingPerson;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.HealthcareOrganizationBean;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.HealthcareWorkerBean;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.RelatedPersonBean;
import ca.infoway.messagebuilder.model.v02_r02.common.merged.SubjectChoice;
import ca.infoway.messagebuilder.model.v02_r02.merged.PrescribedByBean;
import java.util.Date;



/**
 * <p>Consent</p>
 * 
 * <p><p>One and only one of author2 (Consenter) and author1 
 * (Provider) must be specified.</p><p>If author1 (provider) is 
 * specified, reason code must be specified.</p></p>
 * 
 * <p><p>One and only one of author2 (Consenter) and author1 
 * (Provider) must be specified.</p><p>If author1 (provider) is 
 * specified, reason code must be specified.</p></p>
 * 
 * <p><p>Information pertaining to a patient's 
 * agreement/acceptance to have his/her clinical information 
 * electronically stored and shared.</p></p>
 * 
 * <p><p>Provides authorization to record and/or view patient 
 * information.</p><p>Indicates the consent or keyword used to 
 * authorize access or update, including a reason for access; 
 * May also be used to override access restriction to the 
 * information ('break the glass') on a message by message 
 * basis. May be required on a Prescription Request to indicate 
 * a keyword for DUR processing.</p></p>
 * 
 * <p><p>Provides authorization to record and/or view patient 
 * information.</p><p>Indicates the consent or keyword used to 
 * authorize access or update, including a reason for access; 
 * May also be used to override access restriction to the 
 * information ('break the glass') on a message by message 
 * basis. May be required on a Prescription Request to indicate 
 * a keyword for DUR processing.</p></p>
 * 
 * <p><p>The keywords will not be passed from prescriber to 
 * dispenser by the DIS.</p></p>
 */
@Hl7PartTypeMapping({"COCT_MT470002CA.ConsentEvent"})
@Hl7RootType
public class ConsentBean extends MessagePartBean {

    private static final long serialVersionUID = 20110318L;
    private AccessTypeBean subject2InformDefinition;
    private IVL<TS, Interval<Date>> consentEffectiveAndEndTime = new IVLImpl<TS, Interval<Date>>();
    private ConsentedToByBean author2;
    private II consentFormNumber = new IIImpl();
    private SubjectChoice subject1SubjectChoice;
    private PrescribedByBean author1;
    private CV consentOverrideReason = new CVImpl();


    @Hl7XmlMapping({"subject2/informDefinition"})
    public AccessTypeBean getSubject2InformDefinition() {
        return this.subject2InformDefinition;
    }
    public void setSubject2InformDefinition(AccessTypeBean subject2InformDefinition) {
        this.subject2InformDefinition = subject2InformDefinition;
    }


    /**
     * <p>C:Consent Effective and End Time</p>
     * 
     * <p><p>Indicates the time that the consent will expire. 'Low' 
     * is effective time and 'High' is end time.</p></p>
     * 
     * <p><p>Authorization.endTime (high)</p></p>
     * 
     * <p><p>Most consents are not open-ended, to ensure the 
     * patient retains a level of control.</p></p>
     */
    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getConsentEffectiveAndEndTime() {
        return this.consentEffectiveAndEndTime.getValue();
    }
    public void setConsentEffectiveAndEndTime(Interval<Date> consentEffectiveAndEndTime) {
        this.consentEffectiveAndEndTime.setValue(consentEffectiveAndEndTime);
    }


    @Hl7XmlMapping({"author2"})
    public ConsentedToByBean getAuthor2() {
        return this.author2;
    }
    public void setAuthor2(ConsentedToByBean author2) {
        this.author2 = author2;
    }


    /**
     * <p>D:Consent Form Number</p>
     * 
     * <p><p>A unique identifier for a specific consent for a 
     * patient.</p></p>
     * 
     * <p><p>Authorization.formNumber</p></p>
     * 
     * <p><p>Provides a traceable audit link between a physical 
     * consent form and its electronic record</p></p>
     */
    @Hl7XmlMapping({"id"})
    public Identifier getConsentFormNumber() {
        return this.consentFormNumber.getValue();
    }
    public void setConsentFormNumber(Identifier consentFormNumber) {
        this.consentFormNumber.setValue(consentFormNumber);
    }


    @Hl7XmlMapping({"subject1/subjectChoice"})
    public SubjectChoice getSubject1SubjectChoice() {
        return this.subject1SubjectChoice;
    }
    public void setSubject1SubjectChoice(SubjectChoice subject1SubjectChoice) {
        this.subject1SubjectChoice = subject1SubjectChoice;
    }

    public PatientBean getSubject1SubjectChoiceAsPatient1() {
        return this.subject1SubjectChoice instanceof PatientBean ? (PatientBean) this.subject1SubjectChoice : null;
    }
    public boolean hasSubject1SubjectChoiceAsPatient1() {
        return (this.subject1SubjectChoice instanceof PatientBean);
    }

    public HealthcareWorkerBean getSubject1SubjectChoiceAsAssignedEntity1() {
        return this.subject1SubjectChoice instanceof HealthcareWorkerBean ? (HealthcareWorkerBean) this.subject1SubjectChoice : null;
    }
    public boolean hasSubject1SubjectChoiceAsAssignedEntity1() {
        return (this.subject1SubjectChoice instanceof HealthcareWorkerBean);
    }

    public HealthcareOrganizationBean getSubject1SubjectChoiceAsAssignedEntity2() {
        return this.subject1SubjectChoice instanceof HealthcareOrganizationBean ? (HealthcareOrganizationBean) this.subject1SubjectChoice : null;
    }
    public boolean hasSubject1SubjectChoiceAsAssignedEntity2() {
        return (this.subject1SubjectChoice instanceof HealthcareOrganizationBean);
    }

    public RelatedPersonBean getSubject1SubjectChoiceAsPersonalRelationship() {
        return this.subject1SubjectChoice instanceof RelatedPersonBean ? (RelatedPersonBean) this.subject1SubjectChoice : null;
    }
    public boolean hasSubject1SubjectChoiceAsPersonalRelationship() {
        return (this.subject1SubjectChoice instanceof RelatedPersonBean);
    }

    public ActingPerson getSubject1SubjectChoiceAsActingPerson() {
        return this.subject1SubjectChoice instanceof ActingPerson ? (ActingPerson) this.subject1SubjectChoice : null;
    }
    public boolean hasSubject1SubjectChoiceAsActingPerson() {
        return (this.subject1SubjectChoice instanceof ActingPerson);
    }


    @Hl7XmlMapping({"author1"})
    public PrescribedByBean getAuthor1() {
        return this.author1;
    }
    public void setAuthor1(PrescribedByBean author1) {
        this.author1 = author1;
    }


    /**
     * <p>E:Consent Override Reason</p>
     * 
     * <p><p>Indicates a reason for overriding a patient's consent 
     * rules.</p></p>
     * 
     * <p><p>Authorization.reason 
     * (mnemonic)</p><p>Authorization.comment (original text)</p></p>
     * 
     * <p><p>Authorization.reason 
     * (mnemonic)</p><p>Authorization.comment (original text)</p></p>
     * 
     * <p><p>Important for audit purposes</p></p>
     */
    @Hl7XmlMapping({"reasonCode"})
    public ActConsentInformationAccessReason getConsentOverrideReason() {
        return (ActConsentInformationAccessReason) this.consentOverrideReason.getValue();
    }
    public void setConsentOverrideReason(ActConsentInformationAccessReason consentOverrideReason) {
        this.consentOverrideReason.setValue(consentOverrideReason);
    }

}
