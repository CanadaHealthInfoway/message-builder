/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-10 21:45:18 -0500 (Tue, 10 Jan 2012) $
 * Revision:      $LastChangedRevision: 3334 $
 */
package ca.infoway.messagebuilder.generator.dotnet;

import static ca.infoway.messagebuilder.generator.dotnet.CsharpPackageNameAdjustingDecorator.capitalizePackageNameParts;
import static org.apache.commons.lang.SystemUtils.LINE_SEPARATOR;

import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.ClassUtils;
import org.codehaus.plexus.util.StringUtils;

import ca.infoway.messagebuilder.Code;
import ca.infoway.messagebuilder.generator.SourceFileWriter;
import ca.infoway.messagebuilder.generator.util.DomainType;

public class CsharpDomainTypeWriter implements SourceFileWriter {

	private final DomainType domainType;

	public CsharpDomainTypeWriter(DomainType domainType) {
		this.domainType = domainType;
	}

	public void write(Writer writer) throws IOException {
		writer.write("/* This class was auto-generated by the message builder generator tools. */");
        writer.write(LINE_SEPARATOR);
        
        writeImports(getPackageName(), writer);
        writer.write(LINE_SEPARATOR);
        writeNamespaces(getPackageName(), writer);
        writer.write(LINE_SEPARATOR);
        
        writeClassDefinition(writer);
        writer.write("  }");
        writer.write(LINE_SEPARATOR);
        writer.write("}");
        writer.write(LINE_SEPARATOR);
	}

	private void writeImports(String packageName, Writer writer) throws IOException {
		Set<String> namespaces = new TreeSet<String>();
		List<DomainType> type = this.domainType.getParentDomainTypes();
		if (CollectionUtils.isEmpty(type)) {
			namespaces.add(capitalizePackageNameParts(ClassUtils.getPackageName(Code.class)));
		} else {
			for (DomainType domainType : type) {
				namespaces.add(capitalizePackageNameParts(ClassUtils.getPackageName(domainType.getFullyQualifiedClassName())));
			}
		}

		for (String namespace : namespaces) {
			if (!StringUtils.equals(packageName, namespace)) {
				writer.write("using ");
				writer.write(namespace);
				writer.write(";");
		        writer.write(LINE_SEPARATOR);
			}
			
		}
	}

	private void writeClassDefinition(Writer writer) throws IOException {
		writer.write("  public interface ");
		writer.write(this.domainType.getName());
		List<DomainType> parents = this.domainType.getParentDomainTypes();
		if (CollectionUtils.isEmpty(parents)) {
			writer.write(" : Code");
		} else {
			writer.write(" : ");
			boolean first = true;
			for (DomainType domainType : parents) {
				if (!first) {
					writer.write(", ");
				}
				writer.write(domainType.getName());
				first = false;
			}
		}
		writer.write(" {");
        writer.write(LINE_SEPARATOR);
	}

	private String getPackageName() {
		return capitalizePackageNameParts(ClassUtils.getPackageName(this.domainType.getFullyQualifiedClassName()));
	}
	
    protected void writeNamespaces(String packageName, Writer writer) throws IOException {
        writer.write("namespace ");
        writer.write(packageName);
        writer.write(" {");
        writer.write(LINE_SEPARATOR);
    }	
}
