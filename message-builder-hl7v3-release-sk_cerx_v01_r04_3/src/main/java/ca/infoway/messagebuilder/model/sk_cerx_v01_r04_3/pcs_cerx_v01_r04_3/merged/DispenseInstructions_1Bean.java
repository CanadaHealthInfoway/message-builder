/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pcs_cerx_v01_r04_3.merged;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.INT;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.INTImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pcs_cerx_v01_r04_3.coct_mt040205ca.ResponsiblePersonBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pcs_cerx_v01_r04_3.porx_mt010120ca.DrugDispenseInstructionsBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pcs_cerx_v01_r04_3.porx_mt010140ca.RemainingDispensesBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



/**
 * <p>DispenseInstructions</p>
 * 
 * <p>PORX_MT010120CA.SupplyRequest: Dispense Instructions</p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">Specification of 
 * how the prescribed medication is to be dispensed to the 
 * patient. Dispensed instruction information includes the 
 * quantity to be dispensed, how often the quantity is to be 
 * dispensed, etc.</p></p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">A_BillablePharmacyDispense</p></p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets the 
 * parameters within which the dispenser must operate in 
 * dispensing the medication to the patient.</p></p>
 * 
 * <p>PORX_MT060060CA.SupplyRequest: Dispense Instructions</p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">Specification of 
 * how the prescribed device is to be dispensed to the patient. 
 * Dispensed instruction information includes the quantity to 
 * be dispensed, how often the quantity is to be dispensed, 
 * etc.</p></p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">A_BillablePharmacyDispense</p></p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets the 
 * parameters within which the dispenser must operate in 
 * dispensing the device to the patient.</p></p>
 * 
 * <p>PORX_MT010140CA.SupplyRequest: Dispense Instructions</p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">This is the 
 * information that describes the authorization for a dispenser 
 * to dispense the prescription.</p></p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">A_BillablePharmacyDispense</p></p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets the 
 * parameters within which the dispenser must operate.</p></p>
 * 
 * <p>PORX_MT010110CA.SupplyRequest: Dispense Instructions</p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">Specification of 
 * how the prescribed device is to be dispensed to the patient. 
 * Dispensed instruction information includes the quantity to 
 * be dispensed, how often the quantity is to be dispensed, 
 * etc.</p></p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">A_BillablePharmacyDispense</p></p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets the 
 * parameters within which the dispenser must operate in 
 * dispensing the device to the patient.</p></p>
 */
@Hl7PartTypeMapping({"PORX_MT010110CA.SupplyRequest","PORX_MT010120CA.SupplyRequest","PORX_MT010140CA.SupplyRequest","PORX_MT060060CA.SupplyRequest"})
@Hl7RootType
public class DispenseInstructions_1Bean extends MessagePartBean {

    private static final long serialVersionUID = 20110621L;
    private IVL<TS, Interval<Date>> effectiveTime = new IVLImpl<TS, Interval<Date>>();
    private List<DrugDispenseInstructionsBean> componentSupplyRequestItem = new ArrayList<DrugDispenseInstructionsBean>();
    private DispenseShipToLocationBean destinationServiceDeliveryLocation;
    private RecordedAtBean location;
    private List<ResponsiblePersonBean> receiverResponsibleParty = new ArrayList<ResponsiblePersonBean>();
    private INT totalPrescribedQuantity = new INTImpl();
    private ReferencedRecordBean componentOfActRequest;
    private List<RemainingDispensesBean> fulfillmentSupplyEvent = new ArrayList<RemainingDispensesBean>();
    private Patient_1Bean subjectPatient;
    private IVL<TS, Interval<Date>> totalDaysSupply = new IVLImpl<TS, Interval<Date>>();


    /**
     * <p>(no business name)</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">This 
     * indicates the validity period of a prescription (stale 
     * dating the Prescription).</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">It reflects the 
     * prescriber perspective for the validity of the prescription. 
     * Dispenses must not be made against the prescription outside 
     * of this period. The lower-bound of the Prescription 
     * Effective Period signifies the earliest date that the 
     * prescription can be filled for the first time. If an 
     * upper-bound is not specified then the Prescription is 
     * open-ended or will default to a stale-date based on 
     * regulations.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">This 
     * indicates the validity period of a prescription (stale 
     * dating the Prescription).</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">It reflects the 
     * prescriber perspective for the validity of the prescription. 
     * Dispenses must not be made against the prescription outside 
     * of this period. The lower-bound of the Prescription 
     * Effective Period signifies the earliest date that the 
     * prescription can be filled for the first time. If an 
     * upper-bound is not specified then the Prescription is 
     * open-ended or will default to a stale-date based on 
     * regulations.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">ZPB3.9</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">DRU.040-02 (low, 
     * qualifier=07, format=102) eScript:DRU.040-02 (low, 
     * qualifier=36, format=102) HC-SA:Number of days (width) 
     * HC-SA:When will drug be administered?(low) PECS:ZDP.17 
     * (high) PEI:Last date dispensed(when summary type is 'most 
     * recent')</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.dispensingInterval(period)</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">ZPB3.9</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">DRU.040-02 (low, 
     * qualifier=07, format=102) eScript:DRU.040-02 (low, 
     * qualifier=36, format=102) HC-SA:Number of days (width) 
     * HC-SA:When will drug be administered?(low) PECS:ZDP.17 
     * (high) PEI:Last date dispensed(when summary type is 'most 
     * recent')</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.dispensingInterval(period)</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">ZPB3.9</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">DRU.040-02 (low, 
     * qualifier=07, format=102) eScript:DRU.040-02 (low, 
     * qualifier=36, format=102) HC-SA:Number of days (width) 
     * HC-SA:When will drug be administered?(low) PECS:ZDP.17 
     * (high) PEI:Last date dispensed(when summary type is 'most 
     * recent')</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.dispensingInterval(period)</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">ZPB3.9</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">DRU.040-02 (low, 
     * qualifier=07, format=102) eScript:DRU.040-02 (low, 
     * qualifier=36, format=102) HC-SA:Number of days (width) 
     * HC-SA:When will drug be administered?(low) PECS:ZDP.17 
     * (high) PEI:Last date dispensed(when summary type is 'most 
     * recent')</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.dispensingInterval(period)</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Indicates 
     * when the Prescription becomes valid, and when it ceases to 
     * be a dispensable Prescription.</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Some jurisdictions 
     * place a 'stale date' on prescriptions that cause them to 
     * become invalid a certain amount of time after they are 
     * written. This time may vary by medication.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Indicates 
     * when the Prescription becomes valid, and when it ceases to 
     * be a dispensable Prescription.</p><p 
     * xmlns:html="http://www.w3.org/1999/xhtml">Some jurisdictions 
     * place a 'stale date' on prescriptions that cause them to 
     * become invalid a certain amount of time after they are 
     * written. This time may vary by medication.</p></p>
     * 
     * <p><p><strong>If specified, this interval will be used to 
     * set the Prescription Effective Date and the Prescription 
     * Last Fill Expiry Date. If not specified, the Prescription 
     * Effective Date will be set to the effective date of the 
     * Control Act Event.</strong></p></p>
     */
    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getEffectiveTime() {
        return this.effectiveTime.getValue();
    }
    public void setEffectiveTime(Interval<Date> effectiveTime) {
        this.effectiveTime.setValue(effectiveTime);
    }


    @Hl7XmlMapping({"component/supplyRequestItem"})
    public List<DrugDispenseInstructionsBean> getComponentSupplyRequestItem() {
        return this.componentSupplyRequestItem;
    }


    @Hl7XmlMapping({"destination/serviceDeliveryLocation"})
    public DispenseShipToLocationBean getDestinationServiceDeliveryLocation() {
        return this.destinationServiceDeliveryLocation;
    }
    public void setDestinationServiceDeliveryLocation(DispenseShipToLocationBean destinationServiceDeliveryLocation) {
        this.destinationServiceDeliveryLocation = destinationServiceDeliveryLocation;
    }


    @Hl7XmlMapping({"location"})
    public RecordedAtBean getLocation() {
        return this.location;
    }
    public void setLocation(RecordedAtBean location) {
        this.location = location;
    }


    @Hl7XmlMapping({"receiver/responsibleParty"})
    public List<ResponsiblePersonBean> getReceiverResponsibleParty() {
        return this.receiverResponsibleParty;
    }


    /**
     * <p>TotalPrescribedQuantity</p>
     * 
     * <p>B:Total Prescribed Quantity</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">The overall 
     * number of devices to be dispensed under this prescription. 
     * Includes any first fills (trials, aligning quantities), the 
     * initial standard fill plus all refills.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets upper 
     * limit for devices to be dispensed. Can be used to verify the 
     * intention of the prescriber with respect to the overall 
     * prescription. Used for comparison when determining whether 
     * additional quantity may be dispensed in the context of a 
     * part-fill prescription.</p></p>
     * 
     * <p>B:Total Prescribed Quantity</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">The overall 
     * number of devices to be dispensed under this prescription. 
     * Includes any first fills (trials, aligning quantities), the 
     * initial standard fill plus all refills.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets upper 
     * limit for device to be dispensed. Can be used to verify the 
     * intention of the prescriber with respect to the overall 
     * prescription. Used for comparison when determining whether 
     * additional quantity may be dispensed in the context of a 
     * part-fill prescription.</p></p>
     */
    @Hl7XmlMapping({"quantity"})
    public Integer getTotalPrescribedQuantity() {
        return this.totalPrescribedQuantity.getValue();
    }
    public void setTotalPrescribedQuantity(Integer totalPrescribedQuantity) {
        this.totalPrescribedQuantity.setValue(totalPrescribedQuantity);
    }


    @Hl7XmlMapping({"componentOf/actRequest"})
    public ReferencedRecordBean getComponentOfActRequest() {
        return this.componentOfActRequest;
    }
    public void setComponentOfActRequest(ReferencedRecordBean componentOfActRequest) {
        this.componentOfActRequest = componentOfActRequest;
    }


    @Hl7XmlMapping({"fulfillment/supplyEvent"})
    public List<RemainingDispensesBean> getFulfillmentSupplyEvent() {
        return this.fulfillmentSupplyEvent;
    }


    @Hl7XmlMapping({"subject/patient"})
    public Patient_1Bean getSubjectPatient() {
        return this.subjectPatient;
    }
    public void setSubjectPatient(Patient_1Bean subjectPatient) {
        this.subjectPatient = subjectPatient;
    }


    /**
     * <p>TotalDaysSupply</p>
     * 
     * <p>C:Total Days Supply</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">The number 
     * of days that the overall prescribed item is expected to 
     * last, if the patient is compliant with the dispensing and 
     * use of the prescription.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Used to 
     * specify a total authorization as a duration rather than a 
     * quantity with refills. E.g. dispense 30 at a time, refill 
     * for 1 year. May also be sent as an estimate of the expected 
     * overall duration of the prescription based on the quantity 
     * prescribed.</p></p>
     */
    @Hl7XmlMapping({"expectedUseTime"})
    public Interval<Date> getTotalDaysSupply() {
        return this.totalDaysSupply.getValue();
    }
    public void setTotalDaysSupply(Interval<Date> totalDaysSupply) {
        this.totalDaysSupply.setValue(totalDaysSupply);
    }

}
