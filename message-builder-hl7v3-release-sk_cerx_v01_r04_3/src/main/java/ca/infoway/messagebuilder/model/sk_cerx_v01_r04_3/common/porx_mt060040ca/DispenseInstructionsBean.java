/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.common.porx_mt060040ca;

import java.util.Date;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.INT;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.INTImpl;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.common.merged.DispenseShipToLocationBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.common.merged.RecordedAtBean;



/**
 * <p>Dispense Instructions</p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">Specification of 
 * how the prescribed device is to be dispensed to the patient. 
 * Dispensed instruction information includes the quantity to 
 * be dispensed, how often the quantity is to be dispensed, 
 * etc.</p></p>
 * 
 * <p><p 
 * xmlns:html="http://www.w3.org/1999/xhtml">A_BillablePharmacyDispense</p></p>
 * 
 * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets the 
 * parameters within which the dispenser must operate in 
 * dispensing the device to the patient.</p></p>
 */
@Hl7PartTypeMapping({"PORX_MT060040CA.SupplyRequest"})
public class DispenseInstructionsBean extends MessagePartBean {

    private static final long serialVersionUID = 20110714L;
    private INT totalPrescribedQuantity = new INTImpl();
    private IVL<TS, Interval<Date>> totalDaysSupply = new IVLImpl<TS, Interval<Date>>();
    private DispenseShipToLocationBean destinationServiceDeliveryLocation;
    private RecordedAtBean location;


    /**
     * <p>B:Total Prescribed Quantity</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">The overall 
     * number of devices to be dispensed under this prescription. 
     * Includes any first fills (trials, aligning quantities), the 
     * initial standard fill plus all refills.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Sets upper 
     * limit for devices to be dispensed. Can be used to verify the 
     * intention of the prescriber with respect to the overall 
     * prescription. Used for comparison when determining whether 
     * additional quantity may be dispensed in the context of a 
     * part-fill prescription.</p></p>
     */
    @Hl7XmlMapping({"quantity"})
    public Integer getTotalPrescribedQuantity() {
        return this.totalPrescribedQuantity.getValue();
    }
    public void setTotalPrescribedQuantity(Integer totalPrescribedQuantity) {
        this.totalPrescribedQuantity.setValue(totalPrescribedQuantity);
    }


    /**
     * <p>C:Total Days Supply</p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">The number 
     * of days that the overall prescribed item is expected to 
     * last, if the patient is compliant with the dispensing and 
     * use of the prescription.</p></p>
     * 
     * <p><p xmlns:html="http://www.w3.org/1999/xhtml">Used to 
     * specify a total authorization as a duration rather than a 
     * quantity with refills. E.g. dispense 30 at a time, refill 
     * for 1 year. May also be sent as an estimate of the expected 
     * overall duration of the prescription based on the quantity 
     * prescribed.</p></p>
     */
    @Hl7XmlMapping({"expectedUseTime"})
    public Interval<Date> getTotalDaysSupply() {
        return this.totalDaysSupply.getValue();
    }
    public void setTotalDaysSupply(Interval<Date> totalDaysSupply) {
        this.totalDaysSupply.setValue(totalDaysSupply);
    }


    @Hl7XmlMapping({"destination/serviceDeliveryLocation"})
    public DispenseShipToLocationBean getDestinationServiceDeliveryLocation() {
        return this.destinationServiceDeliveryLocation;
    }
    public void setDestinationServiceDeliveryLocation(DispenseShipToLocationBean destinationServiceDeliveryLocation) {
        this.destinationServiceDeliveryLocation = destinationServiceDeliveryLocation;
    }


    @Hl7XmlMapping({"location"})
    public RecordedAtBean getLocation() {
        return this.location;
    }
    public void setLocation(RecordedAtBean location) {
        this.location = location;
    }

}
