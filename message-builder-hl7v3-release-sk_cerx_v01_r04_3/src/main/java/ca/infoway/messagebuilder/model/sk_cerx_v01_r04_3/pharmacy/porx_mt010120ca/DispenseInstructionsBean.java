/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pharmacy.porx_mt010120ca;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.IVL;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.IVLImpl;
import ca.infoway.messagebuilder.datatype.lang.Interval;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.common.coct_mt040205ca.ResponsiblePersonBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.merged.RecordedAtBean;
import ca.infoway.messagebuilder.model.sk_cerx_v01_r04_3.pharmacy.merged.DispenseShipToLocationBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



/**
 * <p>Dispense Instructions</p>
 * 
 * <p><p>Specification of how the prescribed medication is to 
 * be dispensed to the patient. Dispensed instruction 
 * information includes the quantity to be dispensed, how often 
 * the quantity is to be dispensed, etc.</p></p>
 * 
 * <p><p>A_BillablePharmacyDispense</p></p>
 * 
 * <p><p>Sets the parameters within which the dispenser must 
 * operate in dispensing the medication to the patient.</p></p>
 */
@Hl7PartTypeMapping({"PORX_MT010120CA.SupplyRequest"})
public class DispenseInstructionsBean extends MessagePartBean {

    private static final long serialVersionUID = 20120320L;
    private IVL<TS, Interval<Date>> effectiveTime = new IVLImpl<TS, Interval<Date>>();
    private List<ResponsiblePersonBean> receiverResponsibleParty = new ArrayList<ResponsiblePersonBean>();
    private RecordedAtBean location;
    private DispenseShipToLocationBean destinationServiceDeliveryLocation;
    private List<DrugDispenseInstructionsBean> componentSupplyRequestItem = new ArrayList<DrugDispenseInstructionsBean>();


    /**
     * <p>A:Dispensing Allowed Period</p>
     * 
     * <p><p>This indicates the validity period of a prescription 
     * (stale dating the Prescription).</p><p>It reflects the 
     * prescriber perspective for the validity of the prescription. 
     * Dispenses must not be made against the prescription outside 
     * of this period. The lower-bound of the Prescription 
     * Effective Period signifies the earliest date that the 
     * prescription can be filled for the first time. If an 
     * upper-bound is not specified then the Prescription is 
     * open-ended or will default to a stale-date based on 
     * regulations.</p></p>
     * 
     * <p><p>This indicates the validity period of a prescription 
     * (stale dating the Prescription).</p><p>It reflects the 
     * prescriber perspective for the validity of the prescription. 
     * Dispenses must not be made against the prescription outside 
     * of this period. The lower-bound of the Prescription 
     * Effective Period signifies the earliest date that the 
     * prescription can be filled for the first time. If an 
     * upper-bound is not specified then the Prescription is 
     * open-ended or will default to a stale-date based on 
     * regulations.</p></p>
     * 
     * <p><p>ZPB3.9</p><p>DRU.040-02 (low, qualifier=07, 
     * format=102) eScript:DRU.040-02 (low, qualifier=36, 
     * format=102) HC-SA:Number of days (width) HC-SA:When will 
     * drug be administered?(low) PECS:ZDP.17 (high) PEI:Last date 
     * dispensed(when summary type is 'most 
     * recent')</p><p>Prescription.dispensingInterval(period)</p><p>Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p>ZPB3.9</p><p>DRU.040-02 (low, qualifier=07, 
     * format=102) eScript:DRU.040-02 (low, qualifier=36, 
     * format=102) HC-SA:Number of days (width) HC-SA:When will 
     * drug be administered?(low) PECS:ZDP.17 (high) PEI:Last date 
     * dispensed(when summary type is 'most 
     * recent')</p><p>Prescription.dispensingInterval(period)</p><p>Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p>ZPB3.9</p><p>DRU.040-02 (low, qualifier=07, 
     * format=102) eScript:DRU.040-02 (low, qualifier=36, 
     * format=102) HC-SA:Number of days (width) HC-SA:When will 
     * drug be administered?(low) PECS:ZDP.17 (high) PEI:Last date 
     * dispensed(when summary type is 'most 
     * recent')</p><p>Prescription.dispensingInterval(period)</p><p>Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p>ZPB3.9</p><p>DRU.040-02 (low, qualifier=07, 
     * format=102) eScript:DRU.040-02 (low, qualifier=36, 
     * format=102) HC-SA:Number of days (width) HC-SA:When will 
     * drug be administered?(low) PECS:ZDP.17 (high) PEI:Last date 
     * dispensed(when summary type is 'most 
     * recent')</p><p>Prescription.dispensingInterval(period)</p><p>Prescription.effectiveDate 
     * (low) PIN:Prescription.expiryDate (high)</p></p>
     * 
     * <p><p>Indicates when the Prescription becomes valid, and 
     * when it ceases to be a dispensable Prescription.</p><p>Some 
     * jurisdictions place a 'stale date' on prescriptions that 
     * cause them to become invalid a certain amount of time after 
     * they are written. This time may vary by medication.</p></p>
     * 
     * <p><p>Indicates when the Prescription becomes valid, and 
     * when it ceases to be a dispensable Prescription.</p><p>Some 
     * jurisdictions place a 'stale date' on prescriptions that 
     * cause them to become invalid a certain amount of time after 
     * they are written. This time may vary by medication.</p></p>
     */
    @Hl7XmlMapping({"effectiveTime"})
    public Interval<Date> getEffectiveTime() {
        return this.effectiveTime.getValue();
    }
    public void setEffectiveTime(Interval<Date> effectiveTime) {
        this.effectiveTime.setValue(effectiveTime);
    }


    @Hl7XmlMapping({"receiver/responsibleParty"})
    public List<ResponsiblePersonBean> getReceiverResponsibleParty() {
        return this.receiverResponsibleParty;
    }


    @Hl7XmlMapping({"location"})
    public RecordedAtBean getLocation() {
        return this.location;
    }
    public void setLocation(RecordedAtBean location) {
        this.location = location;
    }


    @Hl7XmlMapping({"destination/serviceDeliveryLocation"})
    public DispenseShipToLocationBean getDestinationServiceDeliveryLocation() {
        return this.destinationServiceDeliveryLocation;
    }
    public void setDestinationServiceDeliveryLocation(DispenseShipToLocationBean destinationServiceDeliveryLocation) {
        this.destinationServiceDeliveryLocation = destinationServiceDeliveryLocation;
    }


    @Hl7XmlMapping({"component/supplyRequestItem"})
    public List<DrugDispenseInstructionsBean> getComponentSupplyRequestItem() {
        return this.componentSupplyRequestItem;
    }

}
