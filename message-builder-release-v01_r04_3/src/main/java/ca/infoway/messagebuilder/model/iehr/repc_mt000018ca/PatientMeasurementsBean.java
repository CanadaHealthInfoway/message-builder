/* This class was auto-generated by the message builder generator tools. */
package ca.infoway.messagebuilder.model.iehr.repc_mt000018ca;

import ca.infoway.messagebuilder.annotation.Hl7PartTypeMapping;
import ca.infoway.messagebuilder.annotation.Hl7RootType;
import ca.infoway.messagebuilder.annotation.Hl7XmlMapping;
import ca.infoway.messagebuilder.datatype.CD;
import ca.infoway.messagebuilder.datatype.CV;
import ca.infoway.messagebuilder.datatype.PQ;
import ca.infoway.messagebuilder.datatype.TS;
import ca.infoway.messagebuilder.datatype.impl.CDImpl;
import ca.infoway.messagebuilder.datatype.impl.CVImpl;
import ca.infoway.messagebuilder.datatype.impl.PQImpl;
import ca.infoway.messagebuilder.datatype.impl.TSImpl;
import ca.infoway.messagebuilder.datatype.lang.PhysicalQuantity;
import ca.infoway.messagebuilder.domainvalue.CommonClinicalObservationType;
import ca.infoway.messagebuilder.domainvalue.x_VeryBasicConfidentialityKind;
import ca.infoway.messagebuilder.model.MessagePartBean;
import ca.infoway.messagebuilder.model.merged.ComponentMeasurementsBean;
import ca.infoway.messagebuilder.model.merged.NotesBean;
import ca.infoway.messagebuilder.model.merged.Patient_1Bean;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;



/**
 * <p>Patient Measurements</p>
 * 
 * <p>This comprises a single point-in-time measurement made 
 * about a patient.</p>
 * 
 * <p>Allows pertinent patient measurements to be recorded for 
 * clinical purposes.</p>
 * 
 * <p>Measurement Type with a '''nullFlavor'''value must have 
 * SubObservations Measurement Type without a '''nullFlavor''' 
 * value must not have SubObservations.</p>
 */
@Hl7PartTypeMapping({"REPC_MT000018CA.CommonObservationEvent"})
@Hl7RootType
public class PatientMeasurementsBean extends MessagePartBean {

    private static final long serialVersionUID = 20100614L;
    private CD measurementType = new CDImpl();
    private TS observationTimestamp = new TSImpl();
    private CV commonObservationMaskingIndicator = new CVImpl();
    private PQ observationMeasurementValue = new PQImpl();
    private Patient_1Bean subjectPatient;
    private List<ComponentMeasurementsBean> componentSubObservationEvent = new ArrayList<ComponentMeasurementsBean>();
    private NotesBean subjectOfAnnotation;

    @Hl7XmlMapping({"code"})
    public CommonClinicalObservationType getMeasurementType() {
        return (CommonClinicalObservationType) this.measurementType.getValue();
    }
    public void setMeasurementType(CommonClinicalObservationType measurementType) {
        this.measurementType.setValue(measurementType);
    }

    @Hl7XmlMapping({"effectiveTime"})
    public Date getObservationTimestamp() {
        return this.observationTimestamp.getValue();
    }
    public void setObservationTimestamp(Date observationTimestamp) {
        this.observationTimestamp.setValue(observationTimestamp);
    }

    @Hl7XmlMapping({"confidentialityCode"})
    public x_VeryBasicConfidentialityKind getCommonObservationMaskingIndicator() {
        return (x_VeryBasicConfidentialityKind) this.commonObservationMaskingIndicator.getValue();
    }
    public void setCommonObservationMaskingIndicator(x_VeryBasicConfidentialityKind commonObservationMaskingIndicator) {
        this.commonObservationMaskingIndicator.setValue(commonObservationMaskingIndicator);
    }

    @Hl7XmlMapping({"value"})
    public PhysicalQuantity getObservationMeasurementValue() {
        return this.observationMeasurementValue.getValue();
    }
    public void setObservationMeasurementValue(PhysicalQuantity observationMeasurementValue) {
        this.observationMeasurementValue.setValue(observationMeasurementValue);
    }

    @Hl7XmlMapping({"subject/patient"})
    public Patient_1Bean getSubjectPatient() {
        return this.subjectPatient;
    }
    public void setSubjectPatient(Patient_1Bean subjectPatient) {
        this.subjectPatient = subjectPatient;
    }

    @Hl7XmlMapping({"component/subObservationEvent"})
    public List<ComponentMeasurementsBean> getComponentSubObservationEvent() {
        return this.componentSubObservationEvent;
    }

    @Hl7XmlMapping({"subjectOf/annotation"})
    public NotesBean getSubjectOfAnnotation() {
        return this.subjectOfAnnotation;
    }
    public void setSubjectOfAnnotation(NotesBean subjectOfAnnotation) {
        this.subjectOfAnnotation = subjectOfAnnotation;
    }

}
