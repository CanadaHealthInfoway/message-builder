/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy$
 * Last modified: $LastChangedDate$
 * Revision:      $LastChangedRevision$
 */
package ca.infoway.messagebuilder.simple.xml;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.XMLConstants;
import javax.xml.validation.SchemaFactory;

import org.apache.commons.lang.StringUtils;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * This is a quick-and-dirty validation utility put together by Shaw to test the validity of
 * the XSDs generated by the Simple XML utility. Ideally this could part of the integration
 * tests but I didn't have enough time to get a few issues sorted out.
 * 
 * Usage notes: the only thing that has to be changed is the location of the XSD files. I didn't
 * use the ones in the resources package because they all have a hard-coded reference to 
 * ../../../../../../classes/simpleDataTypes.xsd, which doesn't exist (wrong number of parent 
 * directories). I presume this works in a deployed web server, it doesn't work in the test
 * environment. 
 * 
 * Instead, I set up a temp directory like this:
 * 
 * {home_dir}/temp/dummy/resources/ca/infoway/messagebuilder/model
 * 
 * and placed the simpleDataTypes.xsd file in:
 * 
 * {home_dir}/temp/classes
 * 
 * There is certainly a more clever way to do this.
 *
 * @author <a href="http://www.intelliware.ca/">Intelliware Development</a>
 *
 */
public class XsdValidationUtility {

	public static void main(String[] args) {
		new XsdValidationUtility().validate("/home/administrator/temp/dummy/resources/ca/infoway/messagebuilder/model/");
	}
	
	public void validate(String baseDirectoryLocation) {
		SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		try {
			factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);
		} catch (Exception ignore) {
		}
		
		File directory = new File(baseDirectoryLocation);
		String[] filenames = directory.list();
		Arrays.sort(filenames);
		
		Map<String, List<String>> errorMap = new HashMap<String, List<String>>();
		for (int i = 0; i < filenames.length; i++) {
			try {
				File file = new File(baseDirectoryLocation + filenames[i]);
				factory.newSchema(file);
			} catch (SAXParseException e) {
				addErrorMessageToMap(errorMap, extractErrorType(e), e);
			} catch (SAXException e) {
				addErrorMessageToMap(errorMap, "Unexpected SAXException", e);
			}
		}
		System.out.println("Schema count: " + filenames.length);
		System.out.println("Error summary");
		int errorCount = 0;
		for (String errorType : errorMap.keySet()) {
			System.out.println("Count " + errorType + ": " + errorMap.get(errorType).size());
			errorCount += errorMap.get(errorType).size();
		}
		System.out.println("Schemas in error: " + errorCount);
		for (String errorType : errorMap.keySet()) {
			System.out.println();
			System.out.println(errorType + " details");
			for (String error : errorMap.get(errorType)) {
				System.out.println(error);
			}
		}
	}

	private String extractErrorType(SAXParseException e) {
		return StringUtils.substringBefore(e.getMessage(), ":");
	}

	private void addErrorMessageToMap(Map<String, List<String>> errorMap, String errorType, SAXException e) {
		if (!errorMap.containsKey(errorType)) {
			errorMap.put(errorType, new ArrayList<String>());
		}
		errorMap.get(errorType).add(e.getMessage());
	}
}
